{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./ts/main/rule/RelatiRouteRule.ts","webpack:///./ts/view/Page.ts","webpack:///./ts/main/rule/PlacementRule.ts","webpack:///./ts/view/MessageBox.ts","webpack:///./ts/core/GridBoard.ts","webpack:///./ts/core/SVGProcess.ts","webpack:///./script-launcher.ts","webpack:///./ts/page/MainPage.ts","webpack:///./ts/page/GamePage.ts","webpack:///./ts/main/RelatiGame.ts","webpack:///./ts/main/RelatiDefs.ts","webpack:///./ts/main/rule/WinnerDecision.ts","webpack:///./ts/main/RelatiBoard.ts","webpack:///./ts/main/RelatiPlayer.ts","webpack:///./ts/view/RelatiBoardView.ts","webpack:///./ts/view/RelatiEffectView.ts","webpack:///./ts/main/skill/Placement.ts","webpack:///./ts/main/skill/Relati.ts","webpack:///./ts/main/skill/RelatiNormalTypeCount.ts","webpack:///./ts/page/HelpPage.ts","webpack:///./ts/main/skill/Attack.ts","webpack:///./ts/main/rule/AttackRule.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","GridBoard_1","DRCT_F","GRID_DRCT","DRCT_B","DRCT_R","DRCT_L","DRCT_FR","DRCT_FL","DRCT_BR","DRCT_BL","DRCT_2F","DRCT_2B","DRCT_2R","DRCT_2L","DRCT_2FR","DRCT_2FL","DRCT_2BR","DRCT_2BL","DRCT_FFR","DRCT_FFL","DRCT_BBR","DRCT_BBL","DRCT_FRR","DRCT_FLL","DRCT_BRR","DRCT_BLL","NORMAL_ROUTES","REMOTE_NORMAL_ROUTES","REMOTE_STABLE_ROUTES","BY_NORMAL_RELATI","BY_COMMON_RELATI","RelatiRouteRule","allow","grid","symbol","statusList","routeType","targetGrid","getGrid","middleGrid1","middleGrid2","is","isSpace","middleGrid","trace","routes","push","type","grids","Page","switchToPage","activePage","document","getElementsByClassName","classList","remove","querySelector","location","hash","add","switchTo","pageName","window","addEventListener","RelatiRouteRule_1","placementStatus","PlacementRule","game","_i","_a","board","length","MessageBox","callback","hide","view","className","response","result","getElementById","messageContent","acceptButton","rejectButton","verifyButton","show","message","innerText","style","display","event","Grid","x","y","this","height","drct","f","b","GridBoard","width","SVGNS","updateSVG","element","attribute","name_1","setAttribute","createSVG","tagName","createElementNS","appendSVGChild","childElements","childElements_1","childElement","appendChild","removeSVGChild","elementCount","childNodes","removeChild","Page_1","MessageBox_1","toGamePageButton","toHelpPageButton","RelatiGame_1","RelatiBoard_1","RelatiPlayer_1","RelatiBoardView_1","RelatiEffectView_1","PlacementRule_1","Placement_1","Relati_1","RelatiNormalTypeCount_1","Attack_1","RelatiBoard","players","RelatiPlayer","roleInitEffects","AttackTarget","roleActions","Placement","Attack","rolePassEffects","RelatiNormalTypeCount","DestoryRepeater","RestoreRepeater","RelatiGame","container","boardView","RelatiBoardView","restart","context","Math","floor","offsetX","offsetY","selectGrid","onstart","onend","gameResult","messageIcon","prevPlayerSymbol","onturnstart","nowPlayer","ongridselect","update","onturnend","createHintEffect","layers","createRelatiEffect","RelatiDefs_1","WinnerDecision_1","turn","history","start","GAME_RESULT_NONE","gridSelect","_f","sent","selectedGrid","do","actionValid","_c","_b","_e","_d","WinnerDecision","state","lost","AllRelatiStatus","_this","Promise","select","RelatiStatusList","RelatiSymbolList","GAME_RESULT_OWIN","GAME_RESULT_XWIN","GAME_RESULT_DRAW","playerOPlaceableGrids","playerXPlaceableGrids","playerOHasPlaceableGrid","undefined","playerXHasPlaceableGrid","RelatiGrid","_super","status","__extends","statusName","matchType","statusNameList","statusNameList_1","status_1","statusNameList_2","status_2","gain","statusNameList_3","status_3","statusNameList_4","status_4","points","params","SVGProcess_1","gridViews","routesLayer","dotsLayer","linesLayer","gridsLayer","lineAttr","line","appendGridLine","gridView","RelatiGridView","feature","resize","transform","min","clientWidth","clientHeight","stroke","stroke-width","__assign","symbolAttr","fill","srtX","srtY","endX","endY","color","SYMBOL_COLOR","","O","X","dotAttr","cx","cy","createDot","grids_1","class","createLine","source","traces","traces_1","path","createRelatiLine","setTimeout","traces_2","reverse","grids_2","grids_3","restoreStatus","restore","player","filter","AttackRule_1","bulletGrids","AttackRule","bulletGrid","indexOf","drcts","turretGrid","drcts_1","attack","trtDist","bltDist","drcts_2"],"mappings":"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","file":"script.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","import { GRID_DRCT } from \"../../core/GridBoard\";\nimport { RelatiGrid } from \"../RelatiBoard\";\nimport { RelatiStatus, RelatiSymbol, RelatiRule, RelatiRouteType } from \"../RelatiDefs\";\n\nlet {\n    DRCT_F, DRCT_B, DRCT_R, DRCT_L,\n    DRCT_FR, DRCT_FL, DRCT_BR, DRCT_BL,\n    DRCT_2F, DRCT_2B, DRCT_2R, DRCT_2L,\n    DRCT_2FR, DRCT_2FL, DRCT_2BR, DRCT_2BL,\n    DRCT_FFR, DRCT_FFL, DRCT_BBR, DRCT_BBL,\n    DRCT_FRR, DRCT_FLL, DRCT_BRR, DRCT_BLL\n} = GRID_DRCT;\n\n/** 一般Relati路徑 */\nconst NORMAL_ROUTES = [\n    DRCT_F, DRCT_B, DRCT_R, DRCT_L,\n    DRCT_FR, DRCT_FL, DRCT_BR, DRCT_BL\n];\n\n/** 遠程Relati路徑 */\nconst REMOTE_NORMAL_ROUTES = [\n    [DRCT_2F, DRCT_F],\n    [DRCT_2B, DRCT_B],\n    [DRCT_2R, DRCT_R],\n    [DRCT_2L, DRCT_L],\n    [DRCT_2FR, DRCT_FR],\n    [DRCT_2FL, DRCT_FL],\n    [DRCT_2BR, DRCT_BR],\n    [DRCT_2BL, DRCT_BL]\n];\n\n/** 遠程穩定Relati路徑 */\nconst REMOTE_STABLE_ROUTES = [\n    [DRCT_FFR, DRCT_2F, DRCT_F],\n    [DRCT_FFR, DRCT_FR, DRCT_F],\n    [DRCT_FFR, DRCT_FR, DRCT_R],\n    [DRCT_FFL, DRCT_2F, DRCT_F],\n    [DRCT_FFL, DRCT_FL, DRCT_F],\n    [DRCT_FFL, DRCT_FL, DRCT_L],\n    [DRCT_BBR, DRCT_2B, DRCT_B],\n    [DRCT_BBR, DRCT_BR, DRCT_B],\n    [DRCT_BBR, DRCT_BR, DRCT_R],\n    [DRCT_BBL, DRCT_2B, DRCT_B],\n    [DRCT_BBL, DRCT_BL, DRCT_B],\n    [DRCT_BBL, DRCT_BL, DRCT_L],\n    [DRCT_FRR, DRCT_FR, DRCT_F],\n    [DRCT_FRR, DRCT_2R, DRCT_R],\n    [DRCT_FRR, DRCT_FR, DRCT_R],\n    [DRCT_FLL, DRCT_FL, DRCT_F],\n    [DRCT_FLL, DRCT_2L, DRCT_L],\n    [DRCT_FLL, DRCT_FL, DRCT_L],\n    [DRCT_BRR, DRCT_BR, DRCT_B],\n    [DRCT_BRR, DRCT_2R, DRCT_R],\n    [DRCT_BRR, DRCT_BR, DRCT_R],\n    [DRCT_BLL, DRCT_BL, DRCT_B],\n    [DRCT_BLL, DRCT_2L, DRCT_L],\n    [DRCT_BLL, DRCT_BL, DRCT_L]\n];\n\n/** Relati路徑 */\nexport interface RelatiRoute {\n    type: string,\n    grids: RelatiGrid[]\n}\n\n/** 使用一般Relati路徑類型 */\nexport const BY_NORMAL_RELATI: RelatiRouteType = 0;\n\n/** 使用通用Relati路徑類型 */\nexport const BY_COMMON_RELATI: RelatiRouteType = 1;\n\n/** 連結路徑規範 */\ninterface RelatiRouteRule extends RelatiRule {\n    /** 判斷是否符合連結路徑規範 */\n    allow(\n        grid: RelatiGrid,\n        symbol: RelatiSymbol,\n        statusList: RelatiStatus[],\n        routeType: RelatiRouteType\n    ): boolean;\n\n    /** 取得符合連結路徑規範的路徑 */\n    trace(\n        grid: RelatiGrid,\n        symbol: RelatiSymbol,\n        statusList: RelatiStatus[],\n        routeType: RelatiRouteType\n    ): RelatiRoute[];\n}\n\n/** 連結路徑規範 */\nexport let RelatiRouteRule: RelatiRouteRule = {\n    /** 判斷是否符合連結路徑規範 */\n    allow(grid, symbol, statusList, routeType) {\n        switch (routeType) {\n            case BY_COMMON_RELATI:\n                for (let i = 0; i < 24; i++) {\n                    let targetGrid = grid.getGrid(REMOTE_STABLE_ROUTES[i][0]);\n                    let middleGrid1 = grid.getGrid(REMOTE_STABLE_ROUTES[i][1]);\n                    let middleGrid2 = grid.getGrid(REMOTE_STABLE_ROUTES[i][2]);\n\n                    if (\n                        targetGrid &&\n                        targetGrid.symbol == symbol &&\n                        targetGrid.is(statusList, \"any\") &&\n                        middleGrid1.isSpace &&\n                        middleGrid2.isSpace\n                    ) return true;\n                }\n\n                for (let i = 0; i < 8; i++) {\n                    let targetGrid = grid.getGrid(REMOTE_NORMAL_ROUTES[i][0]);\n                    let middleGrid = grid.getGrid(REMOTE_NORMAL_ROUTES[i][1]);\n\n                    if (\n                        targetGrid &&\n                        targetGrid.symbol == symbol &&\n                        targetGrid.is(statusList, \"any\") &&\n                        middleGrid.isSpace\n                    ) return true;\n                }\n            case BY_NORMAL_RELATI:\n                for (let i = 0; i < 8; i++) {\n                    let targetGrid = grid.getGrid(NORMAL_ROUTES[i]);\n\n                    if (\n                        targetGrid &&\n                        targetGrid.symbol == symbol &&\n                        targetGrid.is(statusList, \"any\")\n                    ) return true;\n                }\n        }\n\n        return false;\n    },\n\n    /** 取得符合連結路徑規範的路徑 */\n    trace(grid, symbol, statusList, routeType) {\n        let routes: RelatiRoute[] = [];\n\n        switch (routeType) {\n            case BY_COMMON_RELATI:\n                for (let i = 0; i < 24; i++) {\n                    let targetGrid = grid.getGrid(REMOTE_STABLE_ROUTES[i][0]);\n                    let middleGrid1 = grid.getGrid(REMOTE_STABLE_ROUTES[i][1]);\n                    let middleGrid2 = grid.getGrid(REMOTE_STABLE_ROUTES[i][2]);\n\n                    if (\n                        targetGrid &&\n                        targetGrid.symbol == symbol &&\n                        targetGrid.is(statusList, \"any\") &&\n                        middleGrid1.isSpace &&\n                        middleGrid2.isSpace\n                    ) routes.push({\n                        type: \"remote-stable\",\n                        grids: [targetGrid, middleGrid1, middleGrid2]\n                    });\n                }\n\n                for (let i = 0; i < 8; i++) {\n                    let targetGrid = grid.getGrid(REMOTE_NORMAL_ROUTES[i][0]);\n                    let middleGrid = grid.getGrid(REMOTE_NORMAL_ROUTES[i][1]);\n\n                    if (\n                        targetGrid &&\n                        targetGrid.symbol == symbol &&\n                        targetGrid.is(statusList, \"any\") &&\n                        middleGrid.isSpace\n                    ) routes.push({\n                        type: \"remote-normal\",\n                        grids: [targetGrid, middleGrid]\n                    });\n                }\n            case BY_NORMAL_RELATI:\n                for (let i = 0; i < 8; i++) {\n                    let targetGrid = grid.getGrid(NORMAL_ROUTES[i]);\n\n                    if (\n                        targetGrid &&\n                        targetGrid.symbol == symbol &&\n                        targetGrid.is(statusList, \"any\")\n                    ) routes.push({\n                        type: \"normal\",\n                        grids: [targetGrid]\n                    });\n                }\n        }\n\n        return routes;\n    }\n};","export namespace Page {\n    export function switchTo(pageName: string) {\n        location.hash = pageName;\n    }\n\n    function switchToPage() {\n        let activePage;\n\n        activePage = document.getElementsByClassName(\"page active\")[0];\n        if (activePage) activePage.classList.remove(\"active\");\n\n        activePage = document.querySelector(`${location.hash}-page`);\n        if (activePage) activePage.classList.add(\"active\");\n    }\n\n    window.addEventListener(\"hashchange\", switchToPage);\n    switchToPage();\n}","import { RelatiGrid } from \"../RelatiBoard\";\nimport { RelatiGame } from \"../RelatiGame\";\nimport { RelatiRouteRule } from \"./RelatiRouteRule\";\nimport { RelatiSymbol, RelatiRule, RelatiStatus, RelatiRouteType } from \"../RelatiDefs\";\n\nlet placementStatus: RelatiStatus[] = [\"relati-repeater\"];\n\n/** 設置判定 */\ninterface PlacementRule extends RelatiRule {\n    /**\n     * 判定棋盤格是否可設置符號\n     * @param grid 棋盤格\n     * @param symbol 符號\n     * @param routeType 連結路徑類型\n     */\n    allow(\n        grid: RelatiGrid,\n        symbol: RelatiSymbol,\n        routeType: RelatiRouteType\n    ): boolean;\n\n    /**\n     * 取得可設置符號的棋盤格\n     * @param game 遊戲主體\n     * @param symbol 符號\n     */\n    trace(\n        game: RelatiGame,\n        symbol: RelatiSymbol,\n        routeType?: RelatiRouteType\n    ): RelatiGrid[];\n}\n\n/** 設置判定 */\nexport let PlacementRule: PlacementRule = {\n    /**\n     * 判定棋盤格是否可設置符號\n     * @param grid 棋盤格\n     * @param symbol 符號\n     * @param routeType 連結路徑類型\n     */\n    allow(grid, symbol, routeType) {\n        return !grid.symbol && RelatiRouteRule.allow(\n            grid, symbol, placementStatus, routeType\n        );\n    },\n\n    /**\n     * 取得可設置符號的棋盤格\n     * @param game 遊戲主體\n     * @param symbol 符號\n     * @param routeType 連結路徑類型\n     */\n    trace(game, symbol, routeType?) {\n        let grids: RelatiGrid[] = [];\n\n        for (let grid of game.board.grids) {\n            if (!grid.symbol && PlacementRule.allow(\n                grid, symbol, routeType || game.routeType\n            )) grids.push(grid);\n        }\n\n        return grids;\n    }\n};","export namespace MessageBox {\n    export let view: HTMLElement = document.getElementById(\"message-box\") as HTMLElement;\n    export let messageContent: HTMLElement = document.getElementById(\"message-content\") as HTMLElement;\n    export let acceptButton: HTMLElement = document.getElementById(\"message-accept\") as HTMLElement;\n    export let rejectButton: HTMLElement = document.getElementById(\"message-reject\") as HTMLElement;\n    export let verifyButton: HTMLElement = document.getElementById(\"message-verify\") as HTMLElement;\n\n    export type MessageCallback = (result: string) => void;\n    let callback: MessageCallback | null;\n\n    export function show(type: string, message: string, response: MessageCallback) {\n        view.className = type;\n        messageContent.innerText = message;\n        messageContent.style.display = message ? \"\" : \"none\";\n        callback = response;\n    }\n\n    export function hide() {\n        view.className = \"none\";\n    }\n\n    export function response(result: string) {\n        if (callback) callback(result);\n        callback = null;\n        hide();\n    }\n\n    acceptButton.addEventListener(\"click\", event => response(\"accept\"));\n    rejectButton.addEventListener(\"click\", event => response(\"reject\"));\n    verifyButton.addEventListener(\"click\", event => response(\"verify\"));\n}","/**\n * 棋盤格方向\n * C: (x = 0, y = 0)\n * F: (x = x, y - 1)\n * B: (x = x, y + 1)\n * R: (x + 1, y = y)\n * L: (x - 1, y = y)\n */\nexport enum GRID_DRCT {\n    DRCT_C = 0x0000,\n    DRCT_F = 0x1000,\n    DRCT_B = 0x0100,\n    DRCT_R = 0x0010,\n    DRCT_L = 0x0001,\n    DRCT_FR = 0x1010,\n    DRCT_FL = 0x1001,\n    DRCT_BR = 0x0110,\n    DRCT_BL = 0x0101,\n\n    DRCT_2F = 0x2000,\n    DRCT_2B = 0x0200,\n    DRCT_2R = 0x0020,\n    DRCT_2L = 0x0002,\n    DRCT_2FR = 0x2020,\n    DRCT_2FL = 0x2002,\n    DRCT_2BR = 0x0220,\n    DRCT_2BL = 0x0202,\n\n    DRCT_FFR = 0x2010,\n    DRCT_FFL = 0x2001,\n    DRCT_BBR = 0x0210,\n    DRCT_BBL = 0x0201,\n    DRCT_FRR = 0x1020,\n    DRCT_FLL = 0x1002,\n    DRCT_BRR = 0x0120,\n    DRCT_BLL = 0x0102\n}\n\n/** 棋盤格 */\nexport class Grid {\n    /** 原始陣列索引 */\n    public readonly i: number;\n\n    constructor(\n        /** 所屬棋盤 */\n        public readonly board: GridBoard,\n        /** X座標 */\n        public readonly x: number,\n        /** Y座標 */\n        public readonly y: number\n    ) {\n        this.i = x * board.height + y;\n    }\n\n    /**\n     * 取得相對位置的棋盤格\n     * @param drct 方向，使用 GRID_DRCT 可簡單取得\n     */\n    getGrid(drct: number) {\n        let f = (0xF000 & drct) >> 12;\n        let b = (0x0F00 & drct) >> 8;\n        let r = (0x00F0 & drct) >> 4;\n        let l = (0x000F & drct);\n\n        let x = this.x + r - l;\n        let y = this.y + b - f;\n\n        return this.board.getGrid(x, y);\n    }\n}\n\n/** 棋盤 */\nexport class GridBoard {\n    /** 所有棋盤格 */\n    public readonly grids: Grid[];\n    /** 棋盤格總數 */\n    public readonly length: number;\n\n    constructor(\n        /** 棋盤寬度 */\n        public readonly width: number,\n        /** 棋盤高度 */\n        public readonly height: number\n    ) {\n        let grids: Grid[] = [];\n\n        this.grids = grids;\n        this.length = width * height;\n\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                let grid = new Grid(this, x, y);\n                grids[grid.i] = grid;\n            }\n        }\n    }\n\n    /**\n     * 取得絕對位置的棋盤格\n     * @param x X座標\n     * @param y Y座標\n     */\n    getGrid(x: number, y: number) {\n        if (\n            x < 0 || x >= this.width ||\n            y < 0 || y >= this.height\n        ) return null;\n\n        let i = x * this.height + y;\n        return this.grids[i];\n    }\n}","const SVGNS = \"http://www.w3.org/2000/svg\";\ntype SVGAttr = { [name: string]: string };\n\n/**\n * 建立SVG元素\n * @param tagName SVG標籤名稱\n * @param attribute SVG屬性\n */\nexport function createSVG<T extends keyof SVGElementTagNameMap>(tagName: T, attribute?: SVGAttr): SVGElementTagNameMap[T] {\n    let element = document.createElementNS(SVGNS, tagName);\n    if (attribute) updateSVG(element, attribute);\n    return element;\n}\n\n/**\n * 變更SVG屬性\n * @param element SVG元素\n * @param attribute SVG屬性\n */\nexport function updateSVG(element: SVGElement, attribute: SVGAttr) {\n    for (let name in attribute) {\n        element.setAttribute(name, attribute[name]);\n    }\n}\n\n/**\n * 增加SVG子元素\n * @param element SVG元素\n * @param childElements SVG子元素\n */\nexport function appendSVGChild(element: SVGElement, childElements: SVGElement[]) {\n    for (let childElement of childElements) {\n        element.appendChild(childElement);\n    }\n}\n\n/**\n * 移除SVG子元素\n * @param element SVG元素\n */\nexport function removeSVGChild(element: SVGElement) {\n    let elementCount = element.childNodes.length;\n\n    while (elementCount-- > 0) {\n        element.removeChild(element.childNodes[0]);\n    }\n}","import { Page } from \"./ts/view/Page\";\nimport { MessageBox } from \"./ts/view/MessageBox\";\n\nimport \"./ts/page/MainPage\";\nimport \"./ts/page/GamePage\";\nimport \"./ts/page/HelpPage\";\n\nif (!location.hash) Page.switchTo(\"main\");\n(window as any).MessageBox = MessageBox;","import { Page } from \"../view/Page\";\n\nconst toGamePageButton: HTMLElement = document.getElementById(\"main-to-game\") as HTMLElement;\nconst toHelpPageButton: HTMLElement = document.getElementById(\"main-to-help\") as HTMLElement;\n\ntoGamePageButton.addEventListener(\"click\", event => Page.switchTo(\"game\"));\ntoHelpPageButton.addEventListener(\"click\", event => Page.switchTo(\"help\"));","import { Page } from \"../view/Page\";\nimport { RelatiGame } from \"../main/RelatiGame\";\nimport { RelatiBoard } from \"../main/RelatiBoard\";\nimport { RelatiPlayer } from \"../main/RelatiPlayer\";\nimport { BY_COMMON_RELATI } from \"../main/rule/RelatiRouteRule\";\nimport { RelatiBoardView } from \"../view/RelatiBoardView\";\nimport { RelatiSymbol, RelatiEffect, RelatiAction } from \"../main/RelatiDefs\";\nimport { createHintEffect, createRelatiEffect } from \"../view/RelatiEffectView\";\nimport { PlacementRule } from \"../main/rule/PlacementRule\";\nimport { MessageBox } from \"../view/MessageBox\";\nimport { Placement } from \"../main/skill/Placement\";\nimport { DestoryRepeater, RestoreRepeater } from \"../main/skill/Relati\";\nimport { RelatiNormalTypeCount } from \"../main/skill/RelatiNormalTypeCount\";\nimport { Attack, AttackTarget } from \"../main/skill/Attack\";\nimport { removeSVGChild } from \"../core/SVGProcess\";\n\nconst toMainPageButton: HTMLElement = document.getElementById(\"game-to-main\") as HTMLElement;\n\ntoMainPageButton.addEventListener(\"click\", event => {\n    MessageBox.show(\"confirm accept reject\", \"確認離開？\", message => {\n        if (message == \"accept\") Page.switchTo(\"main\");\n    });\n});\n\nlet board = new RelatiBoard(9, 9);\nlet players = [new RelatiPlayer(\"O\"), new RelatiPlayer(\"X\")];\nlet roleInitEffects: RelatiEffect[] = [AttackTarget];\nlet roleActions: RelatiAction[] = [Placement, Attack];\nlet rolePassEffects: RelatiEffect[] = [RelatiNormalTypeCount, DestoryRepeater, RestoreRepeater];\n\nlet game = new RelatiGame(\n    board, players, BY_COMMON_RELATI,\n    roleInitEffects,\n    roleActions,\n    rolePassEffects\n);\n\nlet container = document.getElementById(\"game-board\") as HTMLElement;\nlet boardView = new RelatiBoardView(game, container);\n\nwindow.addEventListener(\"hashchange\", () => {\n    if (location.hash == \"#game\") game.restart();\n});\n\nboardView.context.addEventListener(\"click\", function (event: MouseEvent) {\n    let x: number = Math.floor(event.offsetX / 5),\n        y: number = Math.floor(event.offsetY / 5),\n        grid = board.getGrid(x, y);\n\n    if (game.selectGrid) game.selectGrid(grid);\n});\n\ngame.onstart = boardView.remove.bind(boardView);\n\ngame.onend = gameResult => {\n    let messageIcon = \"\";\n    let messageContent = \"\";\n\n    switch (gameResult) {\n        case 1:\n            messageIcon = \"owin\";\n            messageContent = \"圈方獲勝！\";\n            break;\n        case 2:\n            messageIcon = \"xwin\";\n            messageContent = \"叉方獲勝！\";\n            break;\n        case 3:\n            messageIcon = \"draw\";\n            messageContent = \"無人獲勝！\";\n            break;\n    }\n\n    MessageBox.show(`${messageIcon} accept reject`, messageContent, message => {\n        if (message == \"accept\") game.restart();\n    });\n};\n\nlet prevPlayerSymbol: RelatiSymbol = \"\";\n\ngame.onturnstart = () => prevPlayerSymbol = game.nowPlayer.symbol;\ngame.ongridselect = boardView.update.bind(boardView);\n\ngame.onturnend = () => {\n    boardView.update();\n\n    let symbol = game.nowPlayer.symbol;\n    let grids = PlacementRule.trace(\n        game, symbol, BY_COMMON_RELATI\n    );\n\n    createHintEffect(grids, symbol, boardView.layers[1]);\n    createRelatiEffect(prevPlayerSymbol, boardView.layers[0], game);\n};\n\n(window as any).game = game;","import { RelatiBoard, RelatiGrid } from \"./RelatiBoard\";\nimport { RelatiAction, RelatiEffect, RelatiRouteType, AllRelatiStatus, RelatiGameResult } from \"./RelatiDefs\";\nimport { RelatiPlayer } from \"./RelatiPlayer\";\nimport { GAME_RESULT_NONE, WinnerDecision } from \"./rule/WinnerDecision\";\nimport { DestoryRepeater, RestoreRepeater } from \"./skill/Relati\";\nimport { Placement } from \"./skill/Placement\";\n\n/** 遊戲狀態 */\ninterface RelatiGameState {\n    turn: number;\n    type: string;\n    grid: RelatiGrid;\n}\n\n/** 遊戲主體 */\nexport class RelatiGame {\n    /** 回合 */\n    public turn = 0;\n\n    /** 紀錄 */\n    public history: RelatiGameState[] = [];\n\n    /** 已選擇棋盤格 */\n    public selectedGrid?: RelatiGrid;\n\n    /**\n     * 選取棋盤格放置\n     * @param grid 棋盤格\n     */\n    public selectGrid?: (grid: RelatiGrid) => void;\n\n    /**\n     * 遊戲回合開始事件\n     * @param grid 棋盤格\n     */\n    public onturnstart?: (grid: RelatiGrid) => void;\n\n    /**\n     * 遊戲回合結束事件\n     * @param grid 棋盤格\n     */\n    public onturnend?: (grid: RelatiGrid) => void;\n\n    /**\n     * 棋盤格選取事件\n     * @param grid 棋盤格\n     */\n    public ongridselect?: (grid: RelatiGrid) => void;\n\n    /**\n     * 遊戲開始事件\n     */\n    public onstart?: Function;\n\n    /**\n     * 遊戲結束事件\n     */\n    public onend?: (gameResult: RelatiGameResult) => void;\n\n    constructor(\n        /** 棋盤 */\n        public board: RelatiBoard,\n        /** 玩家 */\n        public players: RelatiPlayer[],\n        /** Relati路徑類型 */\n        public routeType: RelatiRouteType,\n        /** 角色固有技能 */\n        public roleInitEffects: RelatiEffect[],\n        /** 角色行動 */\n        public roleActions: RelatiAction[],\n        /** 角色觸發技能 */\n        public rolePassEffects: RelatiEffect[]\n    ) { this.start(); }\n\n    /** 開始 */\n    async start() {\n        let gameResult: RelatiGameResult = GAME_RESULT_NONE;\n        if (this.onstart) this.onstart();\n\n        while (gameResult == GAME_RESULT_NONE) {\n            let grid = await this.gridSelect();\n\n            if (!grid) continue;\n\n            if (this.onturnstart) this.onturnstart(grid);\n\n            this.selectedGrid = grid;\n            for (let effect of this.roleInitEffects) await effect.do(this);\n\n            this.selectedGrid = grid;\n\n            let actionValid = false;\n\n            for (let action of this.roleActions) {\n                if (await action.do(grid, this)) {\n                    actionValid = true;\n                    break;\n                }\n            }\n\n            if (!actionValid) continue;\n\n            this.selectedGrid = grid;\n            for (let effect of this.rolePassEffects) await effect.do(this);\n\n            this.turn++;\n\n            delete this.selectedGrid;\n            gameResult = WinnerDecision.state(this);\n            if (this.onturnend) this.onturnend(grid);\n        }\n\n        if (this.onend) this.onend(gameResult);\n        return gameResult;\n    }\n\n    /** 重新開始 */\n    restart() {\n        this.turn = 0;\n\n        for (let grid of this.board.grids) {\n            grid.symbol = \"\";\n            grid.lost(AllRelatiStatus);\n        }\n\n        this.start();\n    }\n\n    /** 等待格子選取 */\n    gridSelect() {\n        return new Promise<RelatiGrid>(select => {\n            this.selectGrid = grid => {\n                select(grid);\n                if (this.ongridselect) this.ongridselect(grid);\n            };\n        });\n    }\n\n    /** 目前玩家 */\n    get nowPlayer() {\n        return this.players[this.turn % 2];\n    }\n}","import { RelatiGrid } from \"./RelatiBoard\";\nimport { RelatiGame } from \"./RelatiGame\";\n\nexport type RelatiStatus = (\n    \"relati-launcher\" |\n    \"relati-repeater\" |\n    \"relati-receiver\" |\n    \"attack-selected\" |\n    \"effect-activate\"\n);\n\nexport type RelatiSymbol = \"\" | \"O\" | \"X\";\n\nexport interface RelatiRule {\n    allow?(...state: any[]): boolean;\n    trace?(...state: any[]): any[];\n    state?(...state: any[]): number;\n}\n\nexport interface RelatiAction {\n    do(grid: RelatiGrid, game: RelatiGame, ...state: any[]): boolean | Promise<boolean>;\n}\n\nexport interface RelatiEffect {\n    do(game: RelatiGame, ...state: any[]): void;\n}\n\nexport type RelatiRouteType = 0 | 1;\n\nexport type RelatiGameResult = 0 | 1 | 2 | 3;\n\nexport let RelatiStatusList: RelatiStatus[] = [\n    \"relati-launcher\",\n    \"relati-repeater\",\n    \"relati-receiver\",\n    \"attack-selected\",\n    \"effect-activate\"\n];\n\nexport let AllRelatiStatus: RelatiStatus[] = RelatiStatusList;\n\nexport let RelatiSymbolList: RelatiSymbol[] = [\"\", \"O\", \"X\"];","import { RelatiRule, RelatiGameResult } from \"../RelatiDefs\";\nimport { RelatiGame } from \"../RelatiGame\";\nimport { PlacementRule } from \"./PlacementRule\";\n\n/** 尚無結果 */\nexport const GAME_RESULT_NONE: RelatiGameResult = 0;\n\n/** 玩家O勝利 */\nexport const GAME_RESULT_OWIN: RelatiGameResult = 1;\n\n/** 玩家X勝利 */\nexport const GAME_RESULT_XWIN: RelatiGameResult = 2;\n\n/** 平手 */\nexport const GAME_RESULT_DRAW: RelatiGameResult = 3;\n\n/** 勝負判定 */\ninterface WinnerDecision extends RelatiRule {\n    /**\n     * 判定遊戲是否已分出勝負\n     * @param game 遊戲主體\n     */\n    state(game: RelatiGame): RelatiGameResult;\n}\n\n/** 勝負判定 */\nexport let WinnerDecision: WinnerDecision = {\n    /**\n     * 判定遊戲是否已分出勝負\n     * @param game 遊戲主體\n     */\n    state(game: RelatiGame) {\n        if (game.turn < 2) return GAME_RESULT_NONE;\n\n        let { nowPlayer } = game;\n\n        let playerOPlaceableGrids = PlacementRule.trace(game, \"O\");\n        let playerXPlaceableGrids = PlacementRule.trace(game, \"X\");\n\n        let playerOHasPlaceableGrid = playerOPlaceableGrids[0] != undefined;\n        let playerXHasPlaceableGrid = playerXPlaceableGrids[0] != undefined;\n\n        if (\n            playerOHasPlaceableGrid &&\n            playerXHasPlaceableGrid\n        ) return GAME_RESULT_NONE;\n\n        if (nowPlayer.symbol == \"O\") {\n            if (playerOHasPlaceableGrid) return GAME_RESULT_NONE;\n            else if (playerXHasPlaceableGrid) return GAME_RESULT_XWIN;\n        } else if (nowPlayer.symbol == \"X\") {\n            if (playerXHasPlaceableGrid) return GAME_RESULT_NONE;\n            else if (playerOHasPlaceableGrid) return GAME_RESULT_OWIN;\n        }\n\n        return GAME_RESULT_DRAW;\n    }\n}","import { Grid, GridBoard } from \"../core/GridBoard\";\nimport { RelatiStatus, RelatiSymbol } from \"./RelatiDefs\";\n\n/** Relati棋盤格 */\nexport interface RelatiGrid extends Grid {\n    getGrid(drct: number): RelatiGrid;\n}\n\nexport class RelatiGrid extends Grid {\n    /** 符號 */\n    public symbol: RelatiSymbol = \"\";\n\n    /** 狀態存儲 */\n    public status: { [status: string]: boolean } = {};\n\n    constructor(board: RelatiBoard, x: number, y: number) {\n        super(board, x, y);\n    }\n\n    /**\n     * 判斷是否符合狀態\n     * @param statusName 狀態名稱\n     */\n    is(statusName: RelatiStatus): boolean;\n\n    /**\n     * 判斷是否符合所有狀態或任一狀態\n     * @param statusNameList 狀態名稱列表\n     * @param matchType 所有狀態 | 任一狀態\n     */\n    is(statusNameList: RelatiStatus[], matchType: \"all\" | \"any\"): boolean;\n\n    is(statusName: RelatiStatus | RelatiStatus[], matchType?: \"all\" | \"any\") {\n        if (typeof statusName === \"string\") return this.status[statusName];\n\n        let statusNameList = statusName;\n\n        if (matchType === \"all\") {\n            for (let status of statusNameList) {\n                if (!this.status[status]) return false;\n            }\n\n            return true;\n        } else {\n            for (let status of statusNameList) {\n                if (this.status[status]) return true;\n            }\n\n            return false;\n        }\n    }\n\n    /**\n     * 獲得狀態\n     * @param status 狀態名稱\n     */\n    gain(status: RelatiStatus): void;\n\n    /**\n     * 獲得多個狀態\n     * @param statusNameList 狀態名稱列表\n     */\n    gain(statusNameList: RelatiStatus[]): void;\n\n    gain(statusName: RelatiStatus | RelatiStatus[]) {\n        if (typeof statusName === \"string\") {\n            return this.status[statusName] = true;\n        }\n\n        let statusNameList = statusName;\n\n        for (let status of statusNameList) {\n            this.status[status] = true;\n        }\n    }\n\n    /**\n     * 失去狀態\n     * @param status 狀態名稱\n     */\n    lost(status: RelatiStatus): void;\n\n    /**\n     * 失去多個狀態\n     * @param statusNameList 狀態名稱列表\n     */\n    lost(statusNameList: RelatiStatus[]): void;\n\n    lost(statusName: RelatiStatus | RelatiStatus[]) {\n        if (typeof statusName === \"string\") {\n            return this.status[statusName] = false;\n        }\n\n        let statusNameList = statusName;\n\n        for (let status of statusNameList) {\n            this.status[status] = false;\n        }\n    }\n\n    /** 該格視為空格 */\n    get isSpace() {\n        return (\n            this.symbol === \"\" ||\n            !this.is([\"relati-receiver\", \"relati-launcher\"], \"any\")\n        );\n    }\n}\n\n/** Relati棋盤 */\nexport interface RelatiBoard extends GridBoard {\n    grids: RelatiGrid[];\n    getGrid(x: number, y: number): RelatiGrid;\n}\n\nexport class RelatiBoard extends GridBoard {\n    constructor(width: number, height: number) {\n        super(width, height);\n\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                let grid: RelatiGrid = new RelatiGrid(this, x, y);\n                this.grids[grid.i] = grid;\n            }\n        }\n    }\n}","import { RelatiSymbol } from \"./RelatiDefs\";\nimport { RelatiGrid } from \"./RelatiBoard\";\n\nexport class RelatiPlayer {\n    public leader?: RelatiGrid;\n    public status: { [status: string]: boolean } = {};\n    public points: { [points: string]: number } = {};\n    public params: { [params: string]: string } = {};\n    constructor(public symbol: RelatiSymbol) { }\n}","import { RelatiGame } from \"../main/RelatiGame\";\nimport { createSVG, updateSVG, appendSVGChild, removeSVGChild } from \"../core/SVGProcess\";\nimport { RelatiBoard, RelatiGrid } from \"../main/RelatiBoard\";\nimport { RelatiSymbol } from \"../main/RelatiDefs\";\n\nexport class RelatiBoardView {\n    public context: SVGSVGElement = createSVG(\"svg\");\n    public gridViews: RelatiGridView[] = [];\n    public layers: SVGGElement[];\n\n    constructor(public game: RelatiGame, public container: HTMLElement) {\n        let { board } = game;\n\n        updateSVG(this.context, {\n            \"width\": `${board.width * 5}`,\n            \"height\": `${board.height * 5}`\n        });\n\n        let routesLayer = createSVG(\"g\");\n        let dotsLayer = createSVG(\"g\");\n        let linesLayer = createSVG(\"g\");\n        let gridsLayer = createSVG(\"g\");\n        appendGridLine(board, linesLayer);\n\n        this.layers = [routesLayer, dotsLayer, linesLayer, gridsLayer];\n        appendSVGChild(this.context, this.layers);\n\n        for (let grid of board.grids) {\n            let gridView = new RelatiGridView(grid);\n            gridsLayer.appendChild(gridView.context);\n            gridsLayer.appendChild(gridView.feature);\n            this.gridViews.push(gridView);\n        }\n\n        this.container.appendChild(this.context);\n\n        this.resize();\n        window.addEventListener(\"resize\", this.resize.bind(this));\n    }\n\n    resize() {\n        let { container, game: { board: { width, height } } } = this;\n\n        this.context.style.transform = \"scale(\" + Math.min(\n            container.clientWidth / (width * 5),\n            container.clientHeight / (height * 5)\n        ) * 0.95 + \")\";\n    }\n\n    update() {\n        for (let gridView of this.gridViews) gridView.update();\n    }\n\n    remove() {\n        for (let gridView of this.gridViews) gridView.remove();\n        removeSVGChild(this.layers[0]);\n        removeSVGChild(this.layers[1]);\n    }\n}\n\nlet lineAttr = {\n    \"d\": \"\",\n    \"stroke\": \"#888\",\n    \"stroke-width\": \"0.4\"\n};\n\nfunction appendGridLine(board: RelatiBoard, linesLayer: SVGGElement) {\n    for (let x = 1; x < board.width; x++) {\n        lineAttr[\"d\"] = `M ${x * 5} 0 V ${board.height * 5}`;\n        let line = createSVG(\"path\", lineAttr);\n        linesLayer.appendChild(line);\n    }\n\n    for (let y = 1; y < board.height; y++) {\n        lineAttr[\"d\"] = `M 0 ${y * 5} H ${board.width * 5}`;\n        let line = createSVG(\"path\", lineAttr);\n        linesLayer.appendChild(line);\n    }\n}\n\nexport class RelatiGridView {\n    public feature: SVGGElement = createSVG(\"g\");\n    public context: SVGGElement = createSVG(\"g\");\n    public symbol: RelatiSymbol = \"\";\n    public status: { [status: string]: boolean } = {};\n\n    constructor(public grid: RelatiGrid) {\n        this.symbol = grid.symbol;\n        this.status = { ...grid.status };\n        this.update();\n    }\n\n    update() {\n        let { grid } = this;\n\n        if (\n            this.symbol == grid.symbol &&\n            this.status[\"relati-launcher\"] ==\n            grid.status[\"relati-launcher\"] &&\n            this.status[\"relati-repeater\"] ==\n            grid.status[\"relati-repeater\"] &&\n            this.status[\"relati-receiver\"] ==\n            grid.status[\"relati-receiver\"] &&\n            this.status[\"attack-selected\"] ==\n            grid.status[\"attack-selected\"]\n        ) return;\n\n        let symbolAttr = {\n            \"d\": \"\",\n            \"fill\": \"none\",\n            \"stroke\": \"\",\n            \"stroke-width\": \"0.6\"\n        };\n\n        let srtX = grid.x * 5 + 1;\n        let srtY = grid.y * 5 + 1;\n        let endX = grid.x * 5 + 4;\n        let endY = grid.y * 5 + 4;\n\n        switch (grid.symbol) {\n            case \"\": {\n                removeSVGChild(this.context);\n                break;\n            }\n\n            case \"O\": {\n                symbolAttr[\"d\"] = (\n                    `M ${srtX + 1.5} ${srtY + 1.5} ` +\n                    \"m 0 -1.5 \" +\n                    \"a 1.5 1.5 0 0 1, 0 3 \" +\n                    \"a 1.5 1.5 0 0 1, 0 -3\"\n                );\n                symbolAttr[\"stroke\"] = \"crimson\";\n                break;\n            }\n\n            case \"X\": {\n                symbolAttr[\"d\"] = (\n                    `M ${srtX} ${srtY} L ${endX} ${endY} ` +\n                    `M ${endX} ${srtY} L ${srtX} ${endY}`\n                );\n                symbolAttr[\"stroke\"] = \"royalblue\";\n                break;\n            }\n        }\n\n        if (!grid.is(\"relati-repeater\")) symbolAttr[\"stroke\"] = \"#666\";\n\n        if (\n            !grid.is([\"relati-launcher\", \"relati-receiver\"], \"any\")\n        ) symbolAttr[\"stroke\"] = \"#bbb\";\n\n        if (!this.symbol) {\n            if (!grid.isSpace) {\n                if (grid.is(\"relati-launcher\")) {\n                    symbolAttr[\"stroke-width\"] = \"1.2\";\n                    this.context.appendChild(createSVG(\"path\", symbolAttr));\n\n                    symbolAttr[\"stroke-width\"] = \"0.6\";\n                    symbolAttr[\"stroke\"] = \"#f2f2f2\";\n                    this.context.appendChild(createSVG(\"path\", symbolAttr));\n                } else if (grid.is(\"relati-repeater\")) {\n                    this.context.appendChild(createSVG(\"path\", symbolAttr));\n                } else if (grid.is(\"relati-receiver\")) {\n                    this.context.appendChild(createSVG(\"path\", symbolAttr));\n                } else {\n                    this.context.appendChild(createSVG(\"path\", symbolAttr));\n                }\n            }\n        } else {\n            let color = symbolAttr[\"stroke\"];\n\n            updateSVG(\n                this.context.childNodes[0] as SVGElement,\n                { \"stroke\": color }\n            );\n\n            // if (grid.is(\"attack-selected\")) {\n            //     symbolAttr[\"stroke-width\"] = \"0.4\";\n            //     symbolAttr[\"d\"] = (\n            //         `M ${srtX - 0.5} ${srtY + 0.5} v -1 h 1` +\n            //         `M ${endX + 0.5} ${srtY + 0.5} v -1 h -1` +\n            //         `M ${srtX - 0.5} ${endY - 0.5} v 1 h 1` +\n            //         `M ${endX + 0.5} ${endY - 0.5} v 1 h -1`\n            //     );\n\n            //     this.feature.appendChild(createSVG(\"path\", symbolAttr));\n            // } else removeSVGChild(this.feature);\n        }\n\n        this.symbol = grid.symbol;\n        this.status = { ...grid.status };\n    }\n\n    remove() {\n        this.symbol = \"\";\n        this.status = {};\n        removeSVGChild(this.context);\n        removeSVGChild(this.feature);\n    }\n}","import { createSVG, removeSVGChild } from \"../core/SVGProcess\";\nimport { RelatiGrid } from \"../main/RelatiBoard\";\nimport { RelatiGame } from \"../main/RelatiGame\";\nimport { RelatiRouteRule } from \"../main/rule/RelatiRouteRule\";\nimport { RelatiRouteType, RelatiSymbol } from \"../main/RelatiDefs\";\n\nconst SYMBOL_COLOR = {\n    \"\": \"#666\",\n    \"O\": \"crimson\",\n    \"X\": \"royalblue\"\n};\n\nlet dotAttr = {\n    \"cx\": \"\",\n    \"cy\": \"\",\n    \"r\": \"0.5\",\n    \"fill\": \"\"\n};\n\nfunction createDot(x: number, y: number, color: string) {\n    dotAttr[\"cx\"] = `${x * 5 + 2.5}`;\n    dotAttr[\"cy\"] = `${y * 5 + 2.5}`;\n    dotAttr[\"fill\"] = color;\n    return createSVG(\"circle\", dotAttr);\n}\n\nexport function createHintEffect(grids: RelatiGrid[], symbol: RelatiSymbol, view: SVGElement) {\n    let color = SYMBOL_COLOR[symbol];\n    removeSVGChild(view);\n\n    for (let { x, y } of grids) {\n        view.appendChild(createDot(x, y, color));\n    }\n}\n\nlet lineAttr = {\n    \"d\": \"\",\n    \"stroke-width\": \"0.5\",\n    \"stroke\": \"\",\n    \"fill\": \"none\",\n    \"class\": \"relati-effect-line\"\n};\n\nfunction createLine(source: RelatiGrid, traces: RelatiGrid[], color: string, view: SVGElement) {\n    lineAttr[\"d\"] = `M ${source.x * 5 + 2.5} ${source.y * 5 + 2.5}`;\n    lineAttr[\"stroke\"] = color;\n\n    for (let grid of traces) {\n        lineAttr[\"d\"] += ` L ${grid.x * 5 + 2.5} ${grid.y * 5 + 2.5}`;\n    }\n\n    let path = createSVG(\"path\", lineAttr);\n    view.appendChild(path);\n}\n\nfunction createRelatiLine(grid: RelatiGrid, color: string, view: SVGElement, routeType: RelatiRouteType, turn: number, game: RelatiGame) {\n    if (grid.is(\"effect-activate\") || game.turn > turn) return;\n    grid.gain(\"effect-activate\");\n\n    setTimeout(() => {\n        if (game.turn > turn) return;\n        let traces = RelatiRouteRule.trace(grid, grid.symbol, [\"relati-receiver\"], routeType);\n\n        for (let { grids } of traces) {\n            grids.reverse();\n\n            let targetGrid = grids[grids.length - 1];\n\n            if (!targetGrid.is(\"effect-activate\")) {\n                createLine(grid, grids, color, view);\n                createRelatiLine(targetGrid, color, view, routeType, turn, game);\n            }\n        }\n    }, 250);\n}\n\nexport function createRelatiEffect(symbol: RelatiSymbol, view: SVGElement, game: RelatiGame) {\n    let { board: { grids }, routeType, turn } = game;\n    let color = SYMBOL_COLOR[symbol];\n    removeSVGChild(view);\n\n    for (let grid of grids) grid.lost(\"effect-activate\");\n\n    for (let grid of grids) {\n        if (grid.is(\"relati-launcher\") && grid.symbol == symbol) {\n            createRelatiLine(grid, color, view, routeType, turn, game);\n        }\n    }\n}","import { RelatiAction } from \"../RelatiDefs\";\nimport { RelatiGrid } from \"../RelatiBoard\";\nimport { RelatiGame } from \"../RelatiGame\";\nimport { PlacementRule } from \"../rule/PlacementRule\";\n\nexport let Placement: RelatiAction = {\n    do(grid: RelatiGrid, game: RelatiGame) {\n        if (!grid.isSpace) return false;\n\n        let { nowPlayer: { symbol }, routeType } = game;\n\n        if (game.turn < 2) {\n            grid.symbol = symbol;\n            grid.gain(\"relati-launcher\");\n        } else if (PlacementRule.allow(grid, symbol, routeType)) {\n            grid.symbol = symbol;\n            grid.gain(\"relati-receiver\");\n        } else return false;\n\n        game.history.push({\n            turn: game.turn,\n            type: \"placement\",\n            grid\n        });\n\n        return true;\n    }\n};","import { RelatiGrid } from \"../RelatiBoard\";\nimport { RelatiRouteRule, RelatiRoute } from \"../rule/RelatiRouteRule\";\nimport { RelatiRouteType, RelatiEffect, RelatiStatus } from \"../RelatiDefs\";\n\nlet restoreStatus: RelatiStatus[] = [\"relati-receiver\"];\n\n/**\n * 恢復棋盤格Relati的中繼機能\n * @param grid 棋盤格\n * @param routeType 路徑類型\n */\nfunction restore(grid: RelatiGrid, routeType: RelatiRouteType) {\n    if (grid.is(\"relati-repeater\")) return;\n    grid.gain(\"relati-repeater\");\n\n    let traces: RelatiRoute[] = RelatiRouteRule.trace(\n        grid, grid.symbol, restoreStatus, routeType\n    );\n\n    for (let route of traces) restore(route.grids[0], routeType);\n}\n\n/** 恢復Relati中繼機能 */\nexport let RestoreRepeater: RelatiEffect = {\n    do({ board, routeType }) {\n        for (let grid of board.grids) {\n            if (grid.is(\"relati-launcher\")) {\n                restore(grid, routeType);\n            }\n        }\n    }\n};\n\n/** 破壞Relati中繼機能 */\nexport let DestoryRepeater: RelatiEffect = {\n    do({ board }) {\n        for (let grid of board.grids) {\n            grid.lost(\"relati-repeater\");\n        }\n    }\n};","import { RelatiEffect } from \"../RelatiDefs\";\nimport { BY_NORMAL_RELATI, RelatiRouteRule } from \"../rule/RelatiRouteRule\";\n\nexport let RelatiNormalTypeCount: RelatiEffect = {\n    do(game) {\n        let { turn, nowPlayer: player, history } = game;\n\n        if (turn < 2) return;\n\n        let state = history.filter(\n            state => (\n                state.grid.symbol == player.symbol\n            )\n        ).reverse()[0];\n\n        if (state.type != \"placement\") return;\n\n        if (player.points[\"relati-normal-times\"] == undefined) {\n            player.points[\"relati-normal-times\"] = 0;\n        }\n\n        let playerUseNormalRelati = RelatiRouteRule.allow(\n            state.grid, player.symbol, [\"relati-repeater\"], BY_NORMAL_RELATI\n        );\n\n        if (playerUseNormalRelati) player.points[\"relati-normal-times\"]++;\n        else player.points[\"relati-normal-times\"] = 0;\n    }\n};","import { Page } from \"../view/Page\";\nimport { MessageBox } from \"../view/MessageBox\";\n\nconst toMainPageButton: HTMLElement = document.getElementById(\"help-to-main\") as HTMLElement;\n\ntoMainPageButton.addEventListener(\"click\", event => {\n    MessageBox.show(\"confirm accept reject\", \"確認離開？\", message => {\n        if (message == \"accept\") Page.switchTo(\"main\");\n    });\n});","import { RelatiAction, RelatiEffect } from \"../RelatiDefs\";\nimport { AttackRule } from \"../rule/AttackRule\";\n\nexport let Attack: RelatiAction = {\n    async do(grid, game) {\n        let bulletGrids = AttackRule.trace(grid, game.nowPlayer);\n        if (!bulletGrids[0]) return false;\n\n        grid.lost(\"attack-selected\");\n        grid.lost(\"relati-launcher\");\n        grid.lost(\"relati-repeater\");\n        grid.lost(\"relati-receiver\");\n        if (game.ongridselect) game.ongridselect(grid);\n\n        do {\n            var bulletGrid = await game.gridSelect();\n        } while (bulletGrids.indexOf(bulletGrid) < 0);\n\n        bulletGrid.lost(\"relati-launcher\");\n        bulletGrid.lost(\"relati-repeater\");\n        bulletGrid.lost(\"relati-receiver\");\n\n        game.history.push({\n            turn: game.turn,\n            type: \"attack\",\n            grid\n        });\n\n        return true;\n    }\n};\n\nexport let AttackTarget: RelatiEffect = {\n    do({ board, turn, players }) {\n        let player = players[(turn + 1) % 2];\n\n        for (let grid of board.grids) {\n            if (!grid.isSpace) {\n                if (AttackRule.allow(grid, player)) {\n                    grid.gain(\"attack-selected\");\n                } else {\n                    grid.lost(\"attack-selected\");\n                }\n            }\n        }\n    }\n};","import { RelatiRule } from \"../RelatiDefs\";\nimport { RelatiPlayer } from \"../RelatiPlayer\";\nimport { RelatiGrid } from \"../RelatiBoard\";\nimport { GRID_DRCT } from \"../../core/GridBoard\";\n\n/** 攻擊判定 */\ninterface AttackRule extends RelatiRule {\n    /**\n     * 判斷是否可進行攻擊\n     * @param player 玩家\n     * @param grid 棋盤格\n     */\n    allow(\n        grid: RelatiGrid,\n        player: RelatiPlayer\n    ): boolean;\n\n    /**\n     * 取得可攻擊的符號\n     * @param player 玩家\n     * @param grid 棋盤格\n     */\n    trace(\n        grid: RelatiGrid,\n        player: RelatiPlayer\n    ): RelatiGrid[];\n}\n\nlet drcts = [GRID_DRCT.DRCT_F, GRID_DRCT.DRCT_B, GRID_DRCT.DRCT_R, GRID_DRCT.DRCT_L];\n\n/** 攻擊判定 */\nexport let AttackRule: AttackRule = {\n    /**\n     * 判斷是否可進行攻擊\n     * @param targetGrid 棋盤格\n     * @param player 玩家\n     */\n    allow(targetGrid, player) {\n        if (targetGrid.symbol == player.symbol) return false;\n        if (player.points[\"relati-normal-times\"] < 5) return false;\n\n        let turretGrid, bulletGrid;\n\n        for (let drct of drcts) {\n            attack: for (let trtDist = 1; trtDist < 10; trtDist++) {\n                turretGrid = targetGrid.getGrid(drct * trtDist);\n\n                if (!turretGrid) break;\n\n                if (turretGrid.symbol == player.symbol) {\n                    if (turretGrid.is([\"relati-launcher\", \"relati-repeater\"], \"any\")) {\n                        for (let bltDist = 1; bltDist < 10; bltDist++) {\n                            bulletGrid = turretGrid.getGrid(drct * bltDist);\n\n                            if (!bulletGrid) break attack;\n\n                            if (bulletGrid.symbol == player.symbol) {\n                                if (bulletGrid.is([\"relati-launcher\", \"relati-receiver\"], \"any\")) {\n                                    return true;\n                                }\n                            } else if (\n                                bulletGrid.symbol != \"\" &&\n                                bulletGrid.is([\"relati-receiver\", \"relati-launcher\"], \"any\")\n                            ) break attack;\n                        }\n                    }\n                } else if (\n                    turretGrid.symbol != \"\" &&\n                    turretGrid.is([\"relati-receiver\", \"relati-launcher\"], \"any\")\n                ) break;\n            }\n        }\n\n        return false;\n    },\n\n    /**\n     * 取得可攻擊的符號\n     * @param targetGrid 棋盤格\n     * @param player 玩家\n     */\n    trace(targetGrid, player) {\n        if (targetGrid.symbol == player.symbol) return [];\n        if (player.points[\"relati-normal-times\"] < 5) return [];\n\n        let bulletGrids: RelatiGrid[] = [];\n\n        let turretGrid, bulletGrid;\n\n        for (let drct of drcts) {\n            attack: for (let trtDist = 1; trtDist < 10; trtDist++) {\n                turretGrid = targetGrid.getGrid(drct * trtDist);\n\n                if (!turretGrid) break;\n\n                if (turretGrid.symbol == player.symbol) {\n                    if (turretGrid.is([\"relati-launcher\", \"relati-repeater\"], \"any\")) {\n                        for (let bltDist = 1; bltDist < 10; bltDist++) {\n                            bulletGrid = turretGrid.getGrid(drct * bltDist);\n\n                            if (!bulletGrid) break attack;\n\n                            if (bulletGrid.symbol == player.symbol) {\n                                if (bulletGrid.is([\"relati-launcher\", \"relati-repeater\"], \"any\")) {\n                                    bulletGrids.push(bulletGrid);\n                                    break attack;\n                                }\n                            } else if (\n                                bulletGrid.symbol != \"\" &&\n                                bulletGrid.is([\"relati-receiver\", \"relati-launcher\"], \"any\")\n                            ) break attack;\n                        }\n                    }\n                } else if (\n                    turretGrid.symbol != \"\" &&\n                    turretGrid.is([\"relati-receiver\", \"relati-launcher\"], \"any\")\n                ) break;\n            }\n        }\n\n        return bulletGrids;\n    }\n};"],"sourceRoot":""}