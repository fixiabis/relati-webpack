{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./ts/view/Page.ts","webpack:///./ts/main/rule/RelatiRouteRule.ts","webpack:///./ts/view/MessageBox.ts","webpack:///./ts/main/rule/PlacementRule.ts","webpack:///./ts/core/GridBoard.ts","webpack:///./ts/core/SVGProcess.ts","webpack:///./script-launcher.ts","webpack:///./ts/page/MainPage.ts","webpack:///./ts/page/GamePage.ts","webpack:///./ts/main/RelatiGame.ts","webpack:///./ts/main/RelatiDefs.ts","webpack:///./ts/main/rule/WinnerDecision.ts","webpack:///./ts/main/RelatiBoard.ts","webpack:///./ts/main/RelatiPlayer.ts","webpack:///./ts/view/RelatiBoardView.ts","webpack:///./ts/view/RelatiEffectView.ts","webpack:///./ts/main/skill/Placement.ts","webpack:///./ts/main/skill/Relati.ts","webpack:///./ts/page/HelpPage.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Page","switchToPage","activePage","document","getElementsByClassName","classList","remove","querySelector","location","hash","add","switchTo","pageName","window","addEventListener","GridBoard_1","DRCT_F","GRID_DRCT","DRCT_B","DRCT_R","DRCT_L","DRCT_FR","DRCT_FL","DRCT_BR","DRCT_BL","DRCT_2F","DRCT_2B","DRCT_2R","DRCT_2L","DRCT_2FR","DRCT_2FL","DRCT_2BR","DRCT_2BL","DRCT_FFR","DRCT_FFL","DRCT_BBR","DRCT_BBL","DRCT_FRR","DRCT_FLL","DRCT_BRR","DRCT_BLL","NORMAL_ROUTES","REMOTE_NORMAL_ROUTES","REMOTE_STABLE_ROUTES","BY_NORMAL_RELATI","BY_COMMON_RELATI","RelatiRouteRule","allow","grid","symbol","statusList","routeType","targetGrid","getGrid","middleGrid1","middleGrid2","is","isSpace","middleGrid","trace","routes","push","type","grids","MessageBox","callback","hide","view","className","response","result","getElementById","messageContent","acceptButton","rejectButton","verifyButton","show","message","innerText","style","display","event","RelatiRouteRule_1","placementStatus","PlacementRule","game","_i","_a","board","length","Grid","x","y","this","height","drct","f","b","GridBoard","width","SVGNS","updateSVG","element","attribute","name_1","setAttribute","createSVG","tagName","createElementNS","appendSVGChild","childElements","childElements_1","childElement","appendChild","removeSVGChild","elementCount","childNodes","removeChild","Page_1","MessageBox_1","toGamePageButton","toHelpPageButton","RelatiGame_1","RelatiBoard_1","RelatiPlayer_1","RelatiBoardView_1","RelatiEffectView_1","PlacementRule_1","Placement_1","Relati_1","RelatiBoard","players","RelatiPlayer","roleActions","Placement","rolePassEffects","DestoryRepeater","RestoreRepeater","RelatiGame","container","boardView","RelatiBoardView","restart","context","Math","floor","offsetX","offsetY","selectGrid","onstart","onend","gameResult","messageIcon","prevPlayerSymbol","onturnstart","nowPlayer","onturnend","update","createHintEffect","layers","createRelatiEffect","RelatiDefs_1","WinnerDecision_1","roleInitEffects","turn","history","start","GAME_RESULT_NONE","gridSelect","_f","sent","selectedGrid","do","actionValid","_c","_b","_e","_d","WinnerDecision","state","lost","AllRelatiStatus","_this","Promise","select","RelatiStatusList","RelatiSymbolList","GAME_RESULT_OWIN","GAME_RESULT_XWIN","GAME_RESULT_DRAW","playerOPlaceableGrids","playerXPlaceableGrids","playerOHasPlaceableGrid","undefined","playerXHasPlaceableGrid","RelatiGrid","_super","status","__extends","statusName","matchType","statusNameList","statusNameList_1","status_1","statusNameList_2","status_2","gain","statusNameList_3","status_3","statusNameList_4","status_4","points","params","SVGProcess_1","gridViews","routesLayer","dotsLayer","linesLayer","gridsLayer","lineAttr","line","appendGridLine","gridView","RelatiGridView","resize","transform","min","clientWidth","clientHeight","stroke","stroke-width","__assign","symbolAttr","fill","srtX","srtY","endX","endY","color","SYMBOL_COLOR","","O","X","dotAttr","cx","cy","createDot","grids_1","class","createLine","source","traces","traces_1","path","createRelatiLine","setTimeout","traces_2","reverse","grids_2","grids_3","restoreStatus","restore"],"mappings":"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","file":"script.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","export namespace Page {\n    export function switchTo(pageName: string) {\n        location.hash = pageName;\n    }\n\n    function switchToPage() {\n        let activePage;\n\n        activePage = document.getElementsByClassName(\"page active\")[0];\n        if (activePage) activePage.classList.remove(\"active\");\n\n        activePage = document.querySelector(`${location.hash}-page`);\n        if (activePage) activePage.classList.add(\"active\");\n    }\n\n    window.addEventListener(\"hashchange\", switchToPage);\n    switchToPage();\n}","import { GRID_DRCT } from \"../../core/GridBoard\";\nimport { RelatiGrid } from \"../RelatiBoard\";\nimport { RelatiStatus, RelatiSymbol, RelatiRule, RelatiRouteType } from \"../RelatiDefs\";\n\nlet {\n    DRCT_F, DRCT_B, DRCT_R, DRCT_L,\n    DRCT_FR, DRCT_FL, DRCT_BR, DRCT_BL,\n    DRCT_2F, DRCT_2B, DRCT_2R, DRCT_2L,\n    DRCT_2FR, DRCT_2FL, DRCT_2BR, DRCT_2BL,\n    DRCT_FFR, DRCT_FFL, DRCT_BBR, DRCT_BBL,\n    DRCT_FRR, DRCT_FLL, DRCT_BRR, DRCT_BLL\n} = GRID_DRCT;\n\n/** 一般Relati路徑 */\nconst NORMAL_ROUTES = [\n    DRCT_F, DRCT_B, DRCT_R, DRCT_L,\n    DRCT_FR, DRCT_FL, DRCT_BR, DRCT_BL\n];\n\n/** 遠程Relati路徑 */\nconst REMOTE_NORMAL_ROUTES = [\n    [DRCT_2F, DRCT_F],\n    [DRCT_2B, DRCT_B],\n    [DRCT_2R, DRCT_R],\n    [DRCT_2L, DRCT_L],\n    [DRCT_2FR, DRCT_FR],\n    [DRCT_2FL, DRCT_FL],\n    [DRCT_2BR, DRCT_BR],\n    [DRCT_2BL, DRCT_BL]\n];\n\n/** 遠程穩定Relati路徑 */\nconst REMOTE_STABLE_ROUTES = [\n    [DRCT_FFR, DRCT_2F, DRCT_F],\n    [DRCT_FFR, DRCT_FR, DRCT_F],\n    [DRCT_FFR, DRCT_FR, DRCT_R],\n    [DRCT_FFL, DRCT_2F, DRCT_F],\n    [DRCT_FFL, DRCT_FL, DRCT_F],\n    [DRCT_FFL, DRCT_FL, DRCT_L],\n    [DRCT_BBR, DRCT_2B, DRCT_B],\n    [DRCT_BBR, DRCT_BR, DRCT_B],\n    [DRCT_BBR, DRCT_BR, DRCT_R],\n    [DRCT_BBL, DRCT_2B, DRCT_B],\n    [DRCT_BBL, DRCT_BL, DRCT_B],\n    [DRCT_BBL, DRCT_BL, DRCT_L],\n    [DRCT_FRR, DRCT_FR, DRCT_F],\n    [DRCT_FRR, DRCT_2R, DRCT_R],\n    [DRCT_FRR, DRCT_FR, DRCT_R],\n    [DRCT_FLL, DRCT_FL, DRCT_F],\n    [DRCT_FLL, DRCT_2L, DRCT_L],\n    [DRCT_FLL, DRCT_FL, DRCT_L],\n    [DRCT_BRR, DRCT_BR, DRCT_B],\n    [DRCT_BRR, DRCT_2R, DRCT_R],\n    [DRCT_BRR, DRCT_BR, DRCT_R],\n    [DRCT_BLL, DRCT_BL, DRCT_B],\n    [DRCT_BLL, DRCT_2L, DRCT_L],\n    [DRCT_BLL, DRCT_BL, DRCT_L]\n];\n\n/** Relati路徑 */\nexport interface RelatiRoute {\n    type: string,\n    grids: RelatiGrid[]\n}\n\n/** 使用一般Relati路徑類型 */\nexport const BY_NORMAL_RELATI: RelatiRouteType = 0;\n\n/** 使用通用Relati路徑類型 */\nexport const BY_COMMON_RELATI: RelatiRouteType = 1;\n\n/** 連結路徑規範 */\ninterface RelatiRouteRule extends RelatiRule {\n    /** 判斷是否符合連結路徑規範 */\n    allow(\n        grid: RelatiGrid,\n        symbol: RelatiSymbol,\n        statusList: RelatiStatus[],\n        routeType: RelatiRouteType\n    ): boolean;\n\n    /** 取得符合連結路徑規範的路徑 */\n    trace(\n        grid: RelatiGrid,\n        symbol: RelatiSymbol,\n        statusList: RelatiStatus[],\n        routeType: RelatiRouteType\n    ): RelatiRoute[];\n}\n\n/** 連結路徑規範 */\nexport let RelatiRouteRule: RelatiRouteRule = {\n    /** 判斷是否符合連結路徑規範 */\n    allow(grid, symbol, statusList, routeType) {\n        switch (routeType) {\n            case BY_COMMON_RELATI:\n                for (let i = 0; i < 24; i++) {\n                    let targetGrid = grid.getGrid(REMOTE_STABLE_ROUTES[i][0]);\n                    let middleGrid1 = grid.getGrid(REMOTE_STABLE_ROUTES[i][1]);\n                    let middleGrid2 = grid.getGrid(REMOTE_STABLE_ROUTES[i][2]);\n\n                    if (\n                        targetGrid &&\n                        targetGrid.symbol == symbol &&\n                        targetGrid.is(statusList, \"any\") &&\n                        middleGrid1.isSpace &&\n                        middleGrid2.isSpace\n                    ) return true;\n                }\n\n                for (let i = 0; i < 8; i++) {\n                    let targetGrid = grid.getGrid(REMOTE_NORMAL_ROUTES[i][0]);\n                    let middleGrid = grid.getGrid(REMOTE_NORMAL_ROUTES[i][1]);\n\n                    if (\n                        targetGrid &&\n                        targetGrid.symbol == symbol &&\n                        targetGrid.is(statusList, \"any\") &&\n                        middleGrid.isSpace\n                    ) return true;\n                }\n            case BY_NORMAL_RELATI:\n                for (let i = 0; i < 8; i++) {\n                    let targetGrid = grid.getGrid(NORMAL_ROUTES[i]);\n\n                    if (\n                        targetGrid &&\n                        targetGrid.symbol == symbol &&\n                        targetGrid.is(statusList, \"any\")\n                    ) return true;\n                }\n        }\n\n        return false;\n    },\n\n    /** 取得符合連結路徑規範的路徑 */\n    trace(grid, symbol, statusList, routeType) {\n        let routes: RelatiRoute[] = [];\n\n        switch (routeType) {\n            case BY_COMMON_RELATI:\n                for (let i = 0; i < 24; i++) {\n                    let targetGrid = grid.getGrid(REMOTE_STABLE_ROUTES[i][0]);\n                    let middleGrid1 = grid.getGrid(REMOTE_STABLE_ROUTES[i][1]);\n                    let middleGrid2 = grid.getGrid(REMOTE_STABLE_ROUTES[i][2]);\n\n                    if (\n                        targetGrid &&\n                        targetGrid.symbol == symbol &&\n                        targetGrid.is(statusList, \"any\") &&\n                        middleGrid1.isSpace &&\n                        middleGrid2.isSpace\n                    ) routes.push({\n                        type: \"remote-stable\",\n                        grids: [targetGrid, middleGrid1, middleGrid2]\n                    });\n                }\n\n                for (let i = 0; i < 8; i++) {\n                    let targetGrid = grid.getGrid(REMOTE_NORMAL_ROUTES[i][0]);\n                    let middleGrid = grid.getGrid(REMOTE_NORMAL_ROUTES[i][1]);\n\n                    if (\n                        targetGrid &&\n                        targetGrid.symbol == symbol &&\n                        targetGrid.is(statusList, \"any\") &&\n                        middleGrid.isSpace\n                    ) routes.push({\n                        type: \"remote-normal\",\n                        grids: [targetGrid, middleGrid]\n                    });\n                }\n            case BY_NORMAL_RELATI:\n                for (let i = 0; i < 8; i++) {\n                    let targetGrid = grid.getGrid(NORMAL_ROUTES[i]);\n\n                    if (\n                        targetGrid &&\n                        targetGrid.symbol == symbol &&\n                        targetGrid.is(statusList, \"any\")\n                    ) routes.push({\n                        type: \"normal\",\n                        grids: [targetGrid]\n                    });\n                }\n        }\n\n        return routes;\n    }\n};","export namespace MessageBox {\n    export let view: HTMLElement = document.getElementById(\"message-box\") as HTMLElement;\n    export let messageContent: HTMLElement = document.getElementById(\"message-content\") as HTMLElement;\n    export let acceptButton: HTMLElement = document.getElementById(\"message-accept\") as HTMLElement;\n    export let rejectButton: HTMLElement = document.getElementById(\"message-reject\") as HTMLElement;\n    export let verifyButton: HTMLElement = document.getElementById(\"message-verify\") as HTMLElement;\n\n    export type MessageCallback = (result: string) => void;\n    let callback: MessageCallback | null;\n\n    export function show(type: string, message: string, response: MessageCallback) {\n        view.className = type;\n        messageContent.innerText = message;\n        messageContent.style.display = message ? \"\" : \"none\";\n        callback = response;\n    }\n\n    export function hide() {\n        view.className = \"none\";\n    }\n\n    export function response(result: string) {\n        if (callback) callback(result);\n        callback = null;\n        hide();\n    }\n\n    acceptButton.addEventListener(\"click\", event => response(\"accept\"));\n    rejectButton.addEventListener(\"click\", event => response(\"reject\"));\n    verifyButton.addEventListener(\"click\", event => response(\"verify\"));\n}","import { RelatiGrid } from \"../RelatiBoard\";\nimport { RelatiGame } from \"../RelatiGame\";\nimport { RelatiRouteRule } from \"./RelatiRouteRule\";\nimport { RelatiSymbol, RelatiRule, RelatiStatus, RelatiRouteType } from \"../RelatiDefs\";\n\nlet placementStatus: RelatiStatus[] = [\"relati-repeater\"];\n\n/** 設置判定 */\ninterface PlacementRule extends RelatiRule {\n    /**\n     * 判定棋盤格是否可設置符號\n     * @param grid 棋盤格\n     * @param symbol 符號\n     * @param routeType 連結路徑類型\n     */\n    allow(\n        grid: RelatiGrid,\n        symbol: RelatiSymbol,\n        routeType: RelatiRouteType\n    ): boolean;\n\n    /**\n     * 取得可設置符號的棋盤格\n     * @param game 遊戲主體\n     * @param symbol 符號\n     */\n    trace(\n        game: RelatiGame,\n        symbol: RelatiSymbol,\n        routeType?: RelatiRouteType\n    ): RelatiGrid[];\n}\n\n/** 設置判定 */\nexport let PlacementRule: PlacementRule = {\n    /**\n     * 判定棋盤格是否可設置符號\n     * @param grid 棋盤格\n     * @param symbol 符號\n     * @param routeType 連結路徑類型\n     */\n    allow(grid, symbol, routeType) {\n        return grid.isSpace && RelatiRouteRule.allow(\n            grid, symbol, placementStatus, routeType\n        );\n    },\n\n    /**\n     * 取得可設置符號的棋盤格\n     * @param game 遊戲主體\n     * @param symbol 符號\n     * @param routeType 連結路徑類型\n     */\n    trace(game, symbol, routeType?) {\n        let grids: RelatiGrid[] = [];\n\n        for (let grid of game.board.grids) {\n            if (PlacementRule.allow(\n                grid, symbol, routeType || game.routeType\n            )) grids.push(grid);\n        }\n\n        return grids;\n    }\n};","/**\n * 棋盤格方向\n * C: (x = 0, y = 0)\n * F: (x = x, y - 1)\n * B: (x = x, y + 1)\n * R: (x + 1, y = y)\n * L: (x - 1, y = y)\n */\nexport enum GRID_DRCT {\n    DRCT_C = 0x0000,\n    DRCT_F = 0x1000,\n    DRCT_B = 0x0100,\n    DRCT_R = 0x0010,\n    DRCT_L = 0x0001,\n    DRCT_FR = 0x1010,\n    DRCT_FL = 0x1001,\n    DRCT_BR = 0x0110,\n    DRCT_BL = 0x0101,\n\n    DRCT_2F = 0x2000,\n    DRCT_2B = 0x0200,\n    DRCT_2R = 0x0020,\n    DRCT_2L = 0x0002,\n    DRCT_2FR = 0x2020,\n    DRCT_2FL = 0x2002,\n    DRCT_2BR = 0x0220,\n    DRCT_2BL = 0x0202,\n\n    DRCT_FFR = 0x2010,\n    DRCT_FFL = 0x2001,\n    DRCT_BBR = 0x0210,\n    DRCT_BBL = 0x0201,\n    DRCT_FRR = 0x1020,\n    DRCT_FLL = 0x1002,\n    DRCT_BRR = 0x0120,\n    DRCT_BLL = 0x0102\n}\n\n/** 棋盤格 */\nexport class Grid {\n    /** 原始陣列索引 */\n    public readonly i: number;\n\n    constructor(\n        /** 所屬棋盤 */\n        public readonly board: GridBoard,\n        /** X座標 */\n        public readonly x: number,\n        /** Y座標 */\n        public readonly y: number\n    ) {\n        this.i = x * board.height + y;\n    }\n\n    /**\n     * 取得相對位置的棋盤格\n     * @param drct 方向，使用 GRID_DRCT 可簡單取得\n     */\n    getGrid(drct: number) {\n        let f = (0xF000 & drct) >> 12;\n        let b = (0x0F00 & drct) >> 8;\n        let r = (0x00F0 & drct) >> 4;\n        let l = (0x000F & drct);\n\n        let x = this.x + r - l;\n        let y = this.y + b - f;\n\n        return this.board.getGrid(x, y);\n    }\n}\n\n/** 棋盤 */\nexport class GridBoard {\n    /** 所有棋盤格 */\n    public readonly grids: Grid[];\n    /** 棋盤格總數 */\n    public readonly length: number;\n\n    constructor(\n        /** 棋盤寬度 */\n        public readonly width: number,\n        /** 棋盤高度 */\n        public readonly height: number\n    ) {\n        let grids: Grid[] = [];\n\n        this.grids = grids;\n        this.length = width * height;\n\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                let grid = new Grid(this, x, y);\n                grids[grid.i] = grid;\n            }\n        }\n    }\n\n    /**\n     * 取得絕對位置的棋盤格\n     * @param x X座標\n     * @param y Y座標\n     */\n    getGrid(x: number, y: number) {\n        if (\n            x < 0 || x >= this.width ||\n            y < 0 || y >= this.height\n        ) return null;\n\n        let i = x * this.height + y;\n        return this.grids[i];\n    }\n}","const SVGNS = \"http://www.w3.org/2000/svg\";\ntype SVGAttr = { [name: string]: string };\n\n/**\n * 建立SVG元素\n * @param tagName SVG標籤名稱\n * @param attribute SVG屬性\n */\nexport function createSVG<T extends keyof SVGElementTagNameMap>(tagName: T, attribute?: SVGAttr): SVGElementTagNameMap[T] {\n    let element = document.createElementNS(SVGNS, tagName);\n    if (attribute) updateSVG(element, attribute);\n    return element;\n}\n\n/**\n * 變更SVG屬性\n * @param element SVG元素\n * @param attribute SVG屬性\n */\nexport function updateSVG(element: SVGElement, attribute: SVGAttr) {\n    for (let name in attribute) {\n        element.setAttribute(name, attribute[name]);\n    }\n}\n\n/**\n * 增加SVG子元素\n * @param element SVG元素\n * @param childElements SVG子元素\n */\nexport function appendSVGChild(element: SVGElement, childElements: SVGElement[]) {\n    for (let childElement of childElements) {\n        element.appendChild(childElement);\n    }\n}\n\n/**\n * 移除SVG子元素\n * @param element SVG元素\n */\nexport function removeSVGChild(element: SVGElement) {\n    let elementCount = element.childNodes.length;\n\n    while (elementCount-- > 0) {\n        element.removeChild(element.childNodes[0]);\n    }\n}","import { Page } from \"./ts/view/Page\";\nimport { MessageBox } from \"./ts/view/MessageBox\";\n\nimport \"./ts/page/MainPage\";\nimport \"./ts/page/GamePage\";\nimport \"./ts/page/HelpPage\";\n\nif (!location.hash) Page.switchTo(\"main\");\n(window as any).MessageBox = MessageBox;","import { Page } from \"../view/Page\";\n\nconst toGamePageButton: HTMLElement = document.getElementById(\"main-to-game\") as HTMLElement;\nconst toHelpPageButton: HTMLElement = document.getElementById(\"main-to-help\") as HTMLElement;\n\ntoGamePageButton.addEventListener(\"click\", event => Page.switchTo(\"game\"));\ntoHelpPageButton.addEventListener(\"click\", event => Page.switchTo(\"help\"));","import { Page } from \"../view/Page\";\nimport { RelatiGame } from \"../main/RelatiGame\";\nimport { RelatiBoard } from \"../main/RelatiBoard\";\nimport { RelatiPlayer } from \"../main/RelatiPlayer\";\nimport { BY_COMMON_RELATI } from \"../main/rule/RelatiRouteRule\";\nimport { RelatiBoardView } from \"../view/RelatiBoardView\";\nimport { RelatiSymbol, RelatiEffect, RelatiAction } from \"../main/RelatiDefs\";\nimport { createHintEffect, createRelatiEffect } from \"../view/RelatiEffectView\";\nimport { PlacementRule } from \"../main/rule/PlacementRule\";\nimport { MessageBox } from \"../view/MessageBox\";\nimport { Placement } from \"../main/skill/Placement\";\nimport { DestoryRepeater, RestoreRepeater } from \"../main/skill/Relati\";\n\nconst toMainPageButton: HTMLElement = document.getElementById(\"game-to-main\") as HTMLElement;\n\ntoMainPageButton.addEventListener(\"click\", event => {\n    MessageBox.show(\"confirm accept reject\", \"確認離開？\", message => {\n        if (message == \"accept\") Page.switchTo(\"main\");\n    });\n});\n\nlet board = new RelatiBoard(9, 9);\nlet players = [new RelatiPlayer(\"O\"), new RelatiPlayer(\"X\")];\nlet roleInitEffects: RelatiEffect[] = [];\nlet roleActions: RelatiAction[] = [Placement];\nlet rolePassEffects: RelatiEffect[] = [DestoryRepeater, RestoreRepeater];\n\nlet game = new RelatiGame(\n    board, players, BY_COMMON_RELATI,\n    roleInitEffects,\n    roleActions,\n    rolePassEffects\n);\n\nlet container = document.getElementById(\"game-board\") as HTMLElement;\nlet boardView = new RelatiBoardView(game, container);\n\nwindow.addEventListener(\"hashchange\", () => {\n    if (location.hash == \"#game\") game.restart();\n});\n\nboardView.context.addEventListener(\"click\", function (event: MouseEvent) {\n    let x: number = Math.floor(event.offsetX / 5),\n        y: number = Math.floor(event.offsetY / 5),\n        grid = board.getGrid(x, y);\n\n    if (game.selectGrid) game.selectGrid(grid);\n});\n\ngame.onstart = boardView.remove.bind(boardView);\n\ngame.onend = gameResult => {\n    let messageIcon = \"\";\n    let messageContent = \"\";\n\n    switch (gameResult) {\n        case 1:\n            messageIcon = \"owin\";\n            messageContent = \"圈方獲勝！\";\n            break;\n        case 2:\n            messageIcon = \"xwin\";\n            messageContent = \"叉方獲勝！\";\n            break;\n        case 3:\n            messageIcon = \"draw\";\n            messageContent = \"無人獲勝！\";\n            break;\n    }\n\n    MessageBox.show(`${messageIcon} accept reject`, messageContent, message => {\n        if (message == \"accept\") game.restart();\n    });\n};\n\nlet prevPlayerSymbol: RelatiSymbol = \"\";\n\ngame.onturnstart = () => prevPlayerSymbol = game.nowPlayer.symbol;\n\ngame.onturnend = () => {\n    boardView.update();\n\n    let symbol = game.nowPlayer.symbol;\n    let grids = PlacementRule.trace(\n        game, symbol, BY_COMMON_RELATI\n    );\n\n    createHintEffect(grids, symbol, boardView.layers[1]);\n    createRelatiEffect(prevPlayerSymbol, boardView.layers[0], game);\n};","import { RelatiBoard, RelatiGrid } from \"./RelatiBoard\";\nimport { RelatiAction, RelatiEffect, RelatiRouteType, AllRelatiStatus, RelatiGameResult } from \"./RelatiDefs\";\nimport { RelatiPlayer } from \"./RelatiPlayer\";\nimport { GAME_RESULT_NONE, WinnerDecision } from \"./rule/WinnerDecision\";\nimport { DestoryRepeater, RestoreRepeater } from \"./skill/Relati\";\nimport { Placement } from \"./skill/Placement\";\n\n/** 遊戲狀態 */\ninterface RelatiGameState {\n    turn: number;\n    type: string;\n    grid: RelatiGrid;\n}\n\n/** 遊戲主體 */\nexport class RelatiGame {\n    /** 回合 */\n    public turn = 0;\n\n    /** 紀錄 */\n    public history: RelatiGameState[] = [];\n\n    /** 已選擇棋盤格 */\n    public selectedGrid?: RelatiGrid;\n\n    /**\n     * 選取棋盤格放置\n     * @param grid 棋盤格\n     */\n    public selectGrid?: (grid: RelatiGrid) => void;\n\n    /**\n     * 遊戲回合開始事件\n     * @param grid 棋盤格\n     */\n    public onturnstart?: (grid: RelatiGrid) => void;\n\n    /**\n     * 遊戲回合結束事件\n     * @param grid 棋盤格\n     */\n    public onturnend?: (grid: RelatiGrid) => void;\n\n    /**\n     * 遊戲開始事件\n     */\n    public onstart?: Function;\n\n    /**\n     * 遊戲結束事件\n     */\n    public onend?: (gameResult: RelatiGameResult) => void;\n\n    constructor(\n        /** 棋盤 */\n        public board: RelatiBoard,\n        /** 玩家 */\n        public players: RelatiPlayer[],\n        /** Relati路徑類型 */\n        public routeType: RelatiRouteType,\n        /** 角色固有技能 */\n        public roleInitEffects: RelatiEffect[],\n        /** 角色行動 */\n        public roleActions: RelatiAction[],\n        /** 角色觸發技能 */\n        public rolePassEffects: RelatiEffect[]\n    ) { this.start(); }\n\n    /** 開始 */\n    async start() {\n        let gameResult: RelatiGameResult = GAME_RESULT_NONE;\n        if (this.onstart) this.onstart();\n\n        while (gameResult == GAME_RESULT_NONE) {\n            let grid = await this.gridSelect();\n            if (this.onturnstart) this.onturnstart(grid);\n\n            this.selectedGrid = grid;\n            for (let effect of this.roleInitEffects) await effect.do(this);\n\n            this.selectedGrid = grid;\n\n            let actionValid = false;\n\n            for (let action of this.roleActions) {\n                if (await action.do(grid, this)) {\n                    actionValid = true;\n                    break;\n                }\n            }\n\n            if (!actionValid) continue;\n\n            this.selectedGrid = grid;\n            for (let effect of this.rolePassEffects) await effect.do(this);\n\n            delete this.selectedGrid;\n            gameResult = WinnerDecision.state(this);\n            if (this.onturnend) this.onturnend(grid);\n        }\n\n        if (this.onend) this.onend(gameResult);\n        return gameResult;\n    }\n\n    /** 重新開始 */\n    restart() {\n        this.turn = 0;\n\n        for (let grid of this.board.grids) {\n            grid.symbol = \"\";\n            grid.lost(AllRelatiStatus);\n        }\n\n        this.start();\n    }\n\n    /** 等待格子選取 */\n    gridSelect() {\n        return new Promise<RelatiGrid>(select => this.selectGrid = select);\n    }\n\n    /** 目前玩家 */\n    get nowPlayer() {\n        return this.players[this.turn % 2];\n    }\n}","import { RelatiGrid } from \"./RelatiBoard\";\nimport { RelatiGame } from \"./RelatiGame\";\n\nexport type RelatiStatus = (\n    \"relati-launcher\" |\n    \"relati-repeater\" |\n    \"relati-receiver\" |\n    \"effect-activate\"\n);\n\nexport type RelatiSymbol = \"\" | \"O\" | \"X\";\n\nexport interface RelatiRule {\n    allow?(...state: any[]): boolean;\n    trace?(...state: any[]): any[];\n    state?(...state: any[]): number;\n}\n\nexport interface RelatiAction {\n    do(grid: RelatiGrid, game?: RelatiGame, ...state: any[]): boolean;\n}\n\nexport interface RelatiEffect {\n    do(game: RelatiGame, ...state: any[]): void;\n}\n\nexport type RelatiRouteType = 0 | 1;\n\nexport type RelatiGameResult = 0 | 1 | 2 | 3;\n\nexport let RelatiStatusList: RelatiStatus[] = [\n    \"relati-launcher\",\n    \"relati-repeater\",\n    \"relati-receiver\"\n];\n\nexport let AllRelatiStatus: RelatiStatus[] = RelatiStatusList;\n\nexport let RelatiSymbolList: RelatiSymbol[] = [\"\", \"O\", \"X\"];","import { RelatiRule, RelatiGameResult } from \"../RelatiDefs\";\nimport { RelatiGame } from \"../RelatiGame\";\nimport { PlacementRule } from \"./PlacementRule\";\n\n/** 尚無結果 */\nexport const GAME_RESULT_NONE: RelatiGameResult = 0;\n\n/** 玩家O勝利 */\nexport const GAME_RESULT_OWIN: RelatiGameResult = 1;\n\n/** 玩家X勝利 */\nexport const GAME_RESULT_XWIN: RelatiGameResult = 2;\n\n/** 平手 */\nexport const GAME_RESULT_DRAW: RelatiGameResult = 3;\n\n/** 勝負判定 */\ninterface WinnerDecision extends RelatiRule {\n    /**\n     * 判定遊戲是否已分出勝負\n     * @param game 遊戲主體\n     */\n    state(game: RelatiGame): RelatiGameResult;\n}\n\n/** 勝負判定 */\nexport let WinnerDecision: WinnerDecision = {\n    /**\n     * 判定遊戲是否已分出勝負\n     * @param game 遊戲主體\n     */\n    state(game: RelatiGame) {\n        if (game.turn < 2) return GAME_RESULT_NONE;\n\n        let { nowPlayer } = game;\n\n        let playerOPlaceableGrids = PlacementRule.trace(game, \"O\");\n        let playerXPlaceableGrids = PlacementRule.trace(game, \"X\");\n\n        let playerOHasPlaceableGrid = playerOPlaceableGrids[0] != undefined;\n        let playerXHasPlaceableGrid = playerXPlaceableGrids[0] != undefined;\n\n        if (\n            playerOHasPlaceableGrid &&\n            playerXHasPlaceableGrid\n        ) return GAME_RESULT_NONE;\n\n        if (nowPlayer.symbol == \"O\") {\n            if (playerOHasPlaceableGrid) return GAME_RESULT_NONE;\n            else if (playerXHasPlaceableGrid) return GAME_RESULT_XWIN;\n        } else if (nowPlayer.symbol == \"X\") {\n            if (playerXHasPlaceableGrid) return GAME_RESULT_NONE;\n            else if (playerOHasPlaceableGrid) return GAME_RESULT_OWIN;\n        }\n\n        return GAME_RESULT_DRAW;\n    }\n}","import { Grid, GridBoard } from \"../core/GridBoard\";\nimport { RelatiStatus, RelatiSymbol } from \"./RelatiDefs\";\n\n/** Relati棋盤格 */\nexport interface RelatiGrid extends Grid {\n    getGrid(drct: number): RelatiGrid;\n}\n\nexport class RelatiGrid extends Grid {\n    /** 符號 */\n    public symbol: RelatiSymbol = \"\";\n\n    /** 狀態存儲 */\n    public status: { [status: string]: boolean } = {};\n\n    constructor(board: RelatiBoard, x: number, y: number) {\n        super(board, x, y);\n    }\n\n    /**\n     * 判斷是否符合狀態\n     * @param statusName 狀態名稱\n     */\n    is(statusName: RelatiStatus): boolean;\n\n    /**\n     * 判斷是否符合所有狀態或任一狀態\n     * @param statusNameList 狀態名稱列表\n     * @param matchType 所有狀態 | 任一狀態\n     */\n    is(statusNameList: RelatiStatus[], matchType: \"all\" | \"any\"): boolean;\n\n    is(statusName: RelatiStatus | RelatiStatus[], matchType?: \"all\" | \"any\") {\n        if (typeof statusName === \"string\") return this.status[statusName];\n\n        let statusNameList = statusName;\n\n        if (matchType === \"all\") {\n            for (let status of statusNameList) {\n                if (!this.status[status]) return false;\n            }\n\n            return true;\n        } else {\n            for (let status of statusNameList) {\n                if (this.status[status]) return true;\n            }\n\n            return false;\n        }\n    }\n\n    /**\n     * 獲得狀態\n     * @param status 狀態名稱\n     */\n    gain(status: RelatiStatus): void;\n\n    /**\n     * 獲得多個狀態\n     * @param statusNameList 狀態名稱列表\n     */\n    gain(statusNameList: RelatiStatus[]): void;\n\n    gain(statusName: RelatiStatus | RelatiStatus[]) {\n        if (typeof statusName === \"string\") {\n            return this.status[statusName] = true;\n        }\n\n        let statusNameList = statusName;\n\n        for (let status of statusNameList) {\n            this.status[status] = true;\n        }\n    }\n\n    /**\n     * 失去狀態\n     * @param status 狀態名稱\n     */\n    lost(status: RelatiStatus): void;\n\n    /**\n     * 失去多個狀態\n     * @param statusNameList 狀態名稱列表\n     */\n    lost(statusNameList: RelatiStatus[]): void;\n\n    lost(statusName: RelatiStatus | RelatiStatus[]) {\n        if (typeof statusName === \"string\") {\n            return this.status[statusName] = false;\n        }\n\n        let statusNameList = statusName;\n\n        for (let status of statusNameList) {\n            this.status[status] = false;\n        }\n    }\n\n    /** 該格視為空格 */\n    get isSpace() {\n        return (\n            this.symbol === \"\" ||\n            !this.is([\"relati-receiver\", \"relati-launcher\"], \"any\")\n        );\n    }\n}\n\n/** Relati棋盤 */\nexport interface RelatiBoard extends GridBoard {\n    grids: RelatiGrid[];\n    getGrid(x: number, y: number): RelatiGrid;\n}\n\nexport class RelatiBoard extends GridBoard {\n    constructor(width: number, height: number) {\n        super(width, height);\n\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                let grid: RelatiGrid = new RelatiGrid(this, x, y);\n                this.grids[grid.i] = grid;\n            }\n        }\n    }\n}","import { RelatiSymbol } from \"./RelatiDefs\";\nimport { RelatiGrid } from \"./RelatiBoard\";\n\nexport class RelatiPlayer {\n    public leader?: RelatiGrid;\n    public status: { [status: string]: boolean } = {};\n    public points: { [points: string]: number } = {};\n    public params: { [params: string]: string } = {};\n    constructor(public symbol: RelatiSymbol) { }\n}","import { RelatiGame } from \"../main/RelatiGame\";\nimport { createSVG, updateSVG, appendSVGChild, removeSVGChild } from \"../core/SVGProcess\";\nimport { RelatiBoard, RelatiGrid } from \"../main/RelatiBoard\";\nimport { RelatiSymbol } from \"../main/RelatiDefs\";\n\nexport class RelatiBoardView {\n    public context: SVGSVGElement = createSVG(\"svg\");\n    public gridViews: RelatiGridView[] = [];\n    public layers: SVGGElement[];\n\n    constructor(public game: RelatiGame, public container: HTMLElement) {\n        let { board } = game;\n\n        updateSVG(this.context, {\n            \"width\": `${board.width * 5}`,\n            \"height\": `${board.height * 5}`\n        });\n\n        let routesLayer = createSVG(\"g\");\n        let dotsLayer = createSVG(\"g\");\n        let linesLayer = createSVG(\"g\");\n        let gridsLayer = createSVG(\"g\");\n        appendGridLine(board, linesLayer);\n\n        this.layers = [routesLayer, dotsLayer, linesLayer, gridsLayer];\n        appendSVGChild(this.context, this.layers);\n\n        for (let grid of board.grids) {\n            let gridView = new RelatiGridView(grid);\n            gridsLayer.appendChild(gridView.context);\n            this.gridViews.push(gridView);\n        }\n\n        this.container.appendChild(this.context);\n\n        this.resize();\n        window.addEventListener(\"resize\", this.resize.bind(this));\n    }\n\n    resize() {\n        let { container, game: { board: { width, height } } } = this;\n\n        this.context.style.transform = \"scale(\" + Math.min(\n            container.clientWidth / (width * 5),\n            container.clientHeight / (height * 5)\n        ) * 0.95 + \")\";\n    }\n\n    update() {\n        for (let gridView of this.gridViews) gridView.update();\n    }\n\n    remove() {\n        for (let gridView of this.gridViews) gridView.remove();\n        removeSVGChild(this.layers[0]);\n        removeSVGChild(this.layers[1]);\n    }\n}\n\nlet lineAttr = {\n    \"d\": \"\",\n    \"stroke\": \"#888\",\n    \"stroke-width\": \"0.4\"\n};\n\nfunction appendGridLine(board: RelatiBoard, linesLayer: SVGGElement) {\n    for (let x = 1; x < board.width; x++) {\n        lineAttr[\"d\"] = `M ${x * 5} 0 V ${board.height * 5}`;\n        let line = createSVG(\"path\", lineAttr);\n        linesLayer.appendChild(line);\n    }\n\n    for (let y = 1; y < board.height; y++) {\n        lineAttr[\"d\"] = `M 0 ${y * 5} H ${board.width * 5}`;\n        let line = createSVG(\"path\", lineAttr);\n        linesLayer.appendChild(line);\n    }\n}\n\nexport class RelatiGridView {\n    public context: SVGGElement = createSVG(\"g\");\n    public symbol: RelatiSymbol = \"\";\n    public status: { [status: string]: boolean } = {};\n\n    constructor(public grid: RelatiGrid) {\n        this.symbol = grid.symbol;\n        this.status = { ...grid.status };\n        this.update();\n    }\n\n    update() {\n        let { grid } = this;\n\n        if (\n            this.symbol == grid.symbol &&\n            this.status[\"relati-launcher\"] ==\n            grid.status[\"relati-launcher\"] &&\n            this.status[\"relati-repeater\"] ==\n            grid.status[\"relati-repeater\"] &&\n            this.status[\"relati-receiver\"] ==\n            grid.status[\"relati-receiver\"]\n        ) return;\n\n        let symbolAttr = {\n            \"d\": \"\",\n            \"fill\": \"none\",\n            \"stroke\": \"\",\n            \"stroke-width\": \"0.6\"\n        };\n\n        let srtX = grid.x * 5 + 1;\n        let srtY = grid.y * 5 + 1;\n        let endX = grid.x * 5 + 4;\n        let endY = grid.y * 5 + 4;\n\n        switch (grid.symbol) {\n            case \"\": {\n                removeSVGChild(this.context);\n                break;\n            }\n\n            case \"O\": {\n                symbolAttr[\"d\"] = (\n                    `M ${srtX + 1.5} ${srtY + 1.5} ` +\n                    \"m 0 -1.5 \" +\n                    \"a 1.5 1.5 0 0 1, 0 3 \" +\n                    \"a 1.5 1.5 0 0 1, 0 -3\"\n                );\n                symbolAttr[\"stroke\"] = \"crimson\";\n                break;\n            }\n\n            case \"X\": {\n                symbolAttr[\"d\"] = (\n                    `M ${srtX} ${srtY} L ${endX} ${endY} ` +\n                    `M ${endX} ${srtY} L ${srtX} ${endY}`\n                );\n                symbolAttr[\"stroke\"] = \"royalblue\";\n                break;\n            }\n        }\n\n        if (!this.symbol) {\n            if (!grid.isSpace) {\n                if (grid.is(\"relati-launcher\")) {\n                    symbolAttr[\"stroke-width\"] = \"1.2\";\n                    this.context.appendChild(createSVG(\"path\", symbolAttr));\n\n                    symbolAttr[\"stroke-width\"] = \"0.6\";\n                    symbolAttr[\"stroke\"] = \"#f2f2f2\";\n                    this.context.appendChild(createSVG(\"path\", symbolAttr));\n                } else if (grid.is(\"relati-repeater\")) {\n                    this.context.appendChild(createSVG(\"path\", symbolAttr));\n                } else {\n                    symbolAttr[\"stroke\"] = \"#666\";\n                    this.context.appendChild(createSVG(\"path\", symbolAttr));\n                }\n            }\n        } else if (!grid.is(\"relati-launcher\")) {\n            let color = symbolAttr[\"stroke\"];\n\n            if (!grid.is(\"relati-repeater\")) color = \"#666\";\n\n            updateSVG(\n                this.context.childNodes[0] as SVGElement,\n                { \"stroke\": color }\n            );\n        }\n\n        this.symbol = grid.symbol;\n        this.status = { ...grid.status };\n    }\n\n    remove() {\n        this.symbol = \"\";\n        this.status = {};\n        removeSVGChild(this.context);\n    }\n}","import { createSVG, removeSVGChild } from \"../core/SVGProcess\";\nimport { RelatiGrid } from \"../main/RelatiBoard\";\nimport { RelatiGame } from \"../main/RelatiGame\";\nimport { RelatiRouteRule } from \"../main/rule/RelatiRouteRule\";\nimport { RelatiRouteType, RelatiSymbol } from \"../main/RelatiDefs\";\n\nconst SYMBOL_COLOR = {\n    \"\": \"#666\",\n    \"O\": \"crimson\",\n    \"X\": \"royalblue\"\n};\n\nlet dotAttr = {\n    \"cx\": \"\",\n    \"cy\": \"\",\n    \"r\": \"0.5\",\n    \"fill\": \"\"\n};\n\nfunction createDot(x: number, y: number, color: string) {\n    dotAttr[\"cx\"] = `${x * 5 + 2.5}`;\n    dotAttr[\"cy\"] = `${y * 5 + 2.5}`;\n    dotAttr[\"fill\"] = color;\n    return createSVG(\"circle\", dotAttr);\n}\n\nexport function createHintEffect(grids: RelatiGrid[], symbol: RelatiSymbol, view: SVGElement) {\n    let color = SYMBOL_COLOR[symbol];\n    removeSVGChild(view);\n\n    for (let { x, y } of grids) {\n        view.appendChild(createDot(x, y, color));\n    }\n}\n\nlet lineAttr = {\n    \"d\": \"\",\n    \"stroke-width\": \"0.5\",\n    \"stroke\": \"\",\n    \"fill\": \"none\",\n    \"class\": \"relati-effect-line\"\n};\n\nfunction createLine(source: RelatiGrid, traces: RelatiGrid[], color: string, view: SVGElement) {\n    lineAttr[\"d\"] = `M ${source.x * 5 + 2.5} ${source.y * 5 + 2.5}`;\n    lineAttr[\"stroke\"] = color;\n\n    for (let grid of traces) {\n        lineAttr[\"d\"] += ` L ${grid.x * 5 + 2.5} ${grid.y * 5 + 2.5}`;\n    }\n\n    let path = createSVG(\"path\", lineAttr);\n    view.appendChild(path);\n}\n\nfunction createRelatiLine(grid: RelatiGrid, color: string, view: SVGElement, routeType: RelatiRouteType, turn: number, game: RelatiGame) {\n    if (grid.is(\"effect-activate\") || game.turn > turn) return;\n    grid.gain(\"effect-activate\");\n\n    setTimeout(() => {\n        if (game.turn > turn) return;\n        let traces = RelatiRouteRule.trace(grid, grid.symbol, [\"relati-receiver\"], routeType);\n\n        for (let { grids } of traces) {\n            grids.reverse();\n\n            let targetGrid = grids[grids.length - 1];\n\n            if (!targetGrid.is(\"effect-activate\")) {\n                createLine(grid, grids, color, view);\n                createRelatiLine(targetGrid, color, view, routeType, turn, game);\n            }\n        }\n    }, 250);\n}\n\nexport function createRelatiEffect(symbol: RelatiSymbol, view: SVGElement, game: RelatiGame) {\n    let { board: { grids }, routeType, turn } = game;\n    let color = SYMBOL_COLOR[symbol];\n    removeSVGChild(view);\n\n    for (let grid of grids) grid.lost(\"effect-activate\");\n\n    for (let grid of grids) {\n        if (grid.is(\"relati-launcher\") && grid.symbol == symbol) {\n            createRelatiLine(grid, color, view, routeType, turn, game);\n        }\n    }\n}","import { RelatiAction } from \"../RelatiDefs\";\nimport { RelatiGrid } from \"../RelatiBoard\";\nimport { RelatiGame } from \"../RelatiGame\";\nimport { PlacementRule } from \"../rule/PlacementRule\";\n\nexport let Placement: RelatiAction = {\n    do(grid: RelatiGrid, game: RelatiGame) {\n        if (!grid.isSpace) return false;\n\n        let { nowPlayer: { symbol }, routeType } = game;\n\n        if (game.turn < 2) {\n            grid.symbol = symbol;\n            grid.gain(\"relati-launcher\");\n        } else if (PlacementRule.allow(grid, symbol, routeType)) {\n            grid.symbol = symbol;\n            grid.gain(\"relati-receiver\");\n        } else return false;\n\n        game.history.push({\n            turn: game.turn,\n            type: \"placement\",\n            grid\n        });\n\n        game.turn++;\n\n        return true;\n    }\n};","import { RelatiGrid } from \"../RelatiBoard\";\nimport { RelatiRouteRule, RelatiRoute } from \"../rule/RelatiRouteRule\";\nimport { RelatiRouteType, RelatiEffect, RelatiStatus } from \"../RelatiDefs\";\n\nlet restoreStatus: RelatiStatus[] = [\"relati-receiver\"];\n\n/**\n * 恢復棋盤格Relati的中繼機能\n * @param grid 棋盤格\n * @param routeType 路徑類型\n */\nfunction restore(grid: RelatiGrid, routeType: RelatiRouteType) {\n    if (grid.is(\"relati-repeater\")) return;\n    grid.gain(\"relati-repeater\");\n\n    let traces: RelatiRoute[] = RelatiRouteRule.trace(\n        grid, grid.symbol, restoreStatus, routeType\n    );\n\n    for (let route of traces) restore(route.grids[0], routeType);\n}\n\n/** 恢復Relati中繼機能 */\nexport let RestoreRepeater: RelatiEffect = {\n    do({ board, routeType }) {\n        for (let grid of board.grids) {\n            if (grid.is(\"relati-launcher\")) {\n                restore(grid, routeType);\n            }\n        }\n    }\n};\n\n/** 破壞Relati中繼機能 */\nexport let DestoryRepeater: RelatiEffect = {\n    do({ board }) {\n        for (let grid of board.grids) {\n            grid.lost(\"relati-repeater\");\n        }\n    }\n};","import { Page } from \"../view/Page\";\nimport { MessageBox } from \"../view/MessageBox\";\n\nconst toMainPageButton: HTMLElement = document.getElementById(\"help-to-main\") as HTMLElement;\n\ntoMainPageButton.addEventListener(\"click\", event => {\n    MessageBox.show(\"confirm accept reject\", \"確認離開？\", message => {\n        if (message == \"accept\") Page.switchTo(\"main\");\n    });\n});"],"sourceRoot":""}