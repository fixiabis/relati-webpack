{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./ts/main/rule/RelatiRoute.ts","webpack:///./ts/view/Page.ts","webpack:///./ts/main/rule/Placement.ts","webpack:///./ts/core/SVGProcess.ts","webpack:///./ts/view/MessageBox.ts","webpack:///./ts/main/RelatiGame.ts","webpack:///./ts/core/GridBoard.ts","webpack:///./ts/main/RelatiBoard.ts","webpack:///./ts/main/RelatiPlayer.ts","webpack:///./ts/view/RelatiBoard.ts","webpack:///./ts/view/RelatiEffect.ts","webpack:///./ts/main/skill/Placement.ts","webpack:///./ts/main/skill/Relati.ts","webpack:///./main-script.ts","webpack:///./ts/page/MainPage.ts","webpack:///./ts/page/GamePage.ts","webpack:///./ts/main/RelatiDefs.ts","webpack:///./ts/main/rule/WinnerDecision.ts","webpack:///./ts/page/HelpPage.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","GridBoard_1","DRCT_F","GRID_DRCT","DRCT_B","DRCT_R","DRCT_L","DRCT_FR","DRCT_FL","DRCT_BR","DRCT_BL","DRCT_2F","DRCT_2B","DRCT_2R","DRCT_2L","DRCT_2FR","DRCT_2FL","DRCT_2BR","DRCT_2BL","DRCT_FFR","DRCT_FFL","DRCT_BBR","DRCT_BBL","DRCT_FRR","DRCT_FLL","DRCT_BRR","DRCT_BLL","NORMAL_ROUTES","REMOTE_NORMAL_ROUTES","REMOTE_STABLE_ROUTES","BY_NORMAL_RELATI","BY_COMMON_RELATI","RelatiRoute","allow","grid","symbol","statusList","routeType","targetGrid","getGrid","middleGrid1","middleGrid2","is","isSpace","middleGrid","trace","routes","push","Page","switchToPage","activePage","document","getElementsByClassName","classList","remove","querySelector","location","hash","add","switchTo","pageName","window","addEventListener","RelatiRoute_1","placementStatus","PlacementRule","game","grids","_i","_a","board","length","SVGNS","updateSVG","element","attribute","name_1","setAttribute","createSVG","tagName","createElementNS","appendSVGChild","childElements","childElements_1","childElement","appendChild","removeSVGChild","elementCount","childNodes","removeChild","MessageBox","callback","hide","view","className","isShow","response","result","getElementById","messageIcon","messageContent","acceptButton","rejectButton","verifyButton","show","type","message","innerText","style","display","event","RelatiDefs_1","WinnerDecision_1","RelatiGame","players","gridActions","gridEffects","this","turn","start","gameResult","GAME_RESULT_NONE","onstart","selectedGrid","gridSelect","_e","sent","onturnstart","actionValid","_b","do","_d","_c","WinnerDecision","state","onturnend","onend","restart","lost","AllRelatiStatus","_this","Promise","select","selectGrid","ongridselect","Grid","x","y","height","drct","f","b","GridBoard","width","RelatiGrid","_super","apply","arguments","status","__extends","statusName","matchType","statusNameList","statusNameList_1","status_1","statusNameList_2","status_2","gain","statusNameList_3","status_3","statusNameList_4","status_4","RelatiBoard","RelatiPlayer","SVGProcess_1","RelatiBoardView","container","context","gridViews","routesLayer","dotsLayer","linesLayer","gridsLayer","lineAttr","line","appendGridLine","layers","gridView","RelatiGridView","resize","transform","Math","min","clientWidth","clientHeight","update","stroke","stroke-width","__assign","symbolAttr","fill","srtX","srtY","endX","endY","color","SYMBOL_COLOR","","O","X","dotAttr","cx","cy","createDot","createHintEffect","grids_1","class","createLine","source","traces","traces_1","path","createRelatiLine","setTimeout","traces_2","reverse","createRelatiEffect","grids_2","grids_3","Placement_1","Placement","nowPlayer","restoreStatus","restore","RestoreRepeater","DestoryRepeater","global","Page_1","MessageBox_1","toGamePageButton","toHelpPageButton","RelatiGame_1","RelatiBoard_1","RelatiPlayer_1","RelatiBoard_2","RelatiEffect_1","Placement_2","Relati_1","boardView","floor","offsetX","offsetY","prevPlayerSymbol","__awaiter","GAME_RESULT_OWIN","GAME_RESULT_XWIN","GAME_RESULT_DRAW","playerOPlaceableGrids","playerXPlaceableGrids","playerOHasPlaceableGrid","undefined","playerXHasPlaceableGrid","toMainPageButton","helpMessaageView","stepHint","indexOf","stepGrid","stepMessage","innerHTML","childNode","opacity","0","1","3","5","7","9","11","13","15","17","19","21","23","25","27","29","31","33","35","37","39","41","43","45","47","49","2","4","6","8","10","12","20","22","24","26","28","30","32","34","36","38","40","42","44","46","48","50"],"mappings":"aACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,sFClFA,IAAAC,EAAApC,EAAA,GAKIqC,EAAAD,EAAAE,UAAAD,OAAQE,EAAAH,EAAAE,UAAAC,OAAQC,EAAAJ,EAAAE,UAAAE,OAAQC,EAAAL,EAAAE,UAAAG,OACxBC,EAAAN,EAAAE,UAAAI,QAASC,EAAAP,EAAAE,UAAAK,QAASC,EAAAR,EAAAE,UAAAM,QAASC,EAAAT,EAAAE,UAAAO,QAC3BC,EAAAV,EAAAE,UAAAQ,QAASC,EAAAX,EAAAE,UAAAS,QAASC,EAAAZ,EAAAE,UAAAU,QAASC,EAAAb,EAAAE,UAAAW,QAC3BC,EAAAd,EAAAE,UAAAY,SAAUC,EAAAf,EAAAE,UAAAa,SAAUC,EAAAhB,EAAAE,UAAAc,SAAUC,EAAAjB,EAAAE,UAAAe,SAC9BC,EAAAlB,EAAAE,UAAAgB,SAAUC,EAAAnB,EAAAE,UAAAiB,SAAUC,EAAApB,EAAAE,UAAAkB,SAAUC,EAAArB,EAAAE,UAAAmB,SAC9BC,EAAAtB,EAAAE,UAAAoB,SAAUC,EAAAvB,EAAAE,UAAAqB,SAAUC,EAAAxB,EAAAE,UAAAsB,SAAUC,EAAAzB,EAAAE,UAAAuB,SAI5BC,EAAgB,CAClBzB,EAAQE,EAAQC,EAAQC,EACxBC,EAASC,EAASC,EAASC,GAIzBkB,EAAuB,CACzB,CAACjB,EAAST,GACV,CAACU,EAASR,GACV,CAACS,EAASR,GACV,CAACS,EAASR,GACV,CAACS,EAAUR,GACX,CAACS,EAAUR,GACX,CAACS,EAAUR,GACX,CAACS,EAAUR,IAITmB,EAAuB,CACzB,CAACV,EAAUR,EAAST,GACpB,CAACiB,EAAUZ,EAASL,GACpB,CAACiB,EAAUZ,EAASF,GACpB,CAACe,EAAUT,EAAST,GACpB,CAACkB,EAAUZ,EAASN,GACpB,CAACkB,EAAUZ,EAASF,GACpB,CAACe,EAAUT,EAASR,GACpB,CAACiB,EAAUZ,EAASL,GACpB,CAACiB,EAAUZ,EAASJ,GACpB,CAACiB,EAAUV,EAASR,GACpB,CAACkB,EAAUZ,EAASN,GACpB,CAACkB,EAAUZ,EAASJ,GACpB,CAACiB,EAAUhB,EAASL,GACpB,CAACqB,EAAUV,EAASR,GACpB,CAACkB,EAAUhB,EAASF,GACpB,CAACmB,EAAUhB,EAASN,GACpB,CAACsB,EAAUV,EAASR,GACpB,CAACkB,EAAUhB,EAASF,GACpB,CAACmB,EAAUhB,EAASL,GACpB,CAACqB,EAAUZ,EAASR,GACpB,CAACoB,EAAUhB,EAASJ,GACpB,CAACqB,EAAUhB,EAASN,GACpB,CAACsB,EAAUZ,EAASR,GACpB,CAACoB,EAAUhB,EAASJ,IAMXvC,EAAA+D,iBAAmB,EAGnB/D,EAAAgE,iBAAmB,EAsBrBhE,EAAAiE,YAA2B,CAElCC,MAAK,SAACC,EAAMC,EAAQC,EAAYC,GAC5B,OAAQA,GACJ,KAAKtE,EAAAgE,iBACD,IAAK,IAAI9D,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAIqE,EAAaJ,EAAKK,QAAQV,EAAqB5D,GAAG,IAClDuE,EAAcN,EAAKK,QAAQV,EAAqB5D,GAAG,IACnDwE,EAAcP,EAAKK,QAAQV,EAAqB5D,GAAG,IAEvD,GACIqE,GACAA,EAAWH,QAAUA,GACrBG,EAAWI,GAAGN,EAAY,QAC1BI,EAAYG,SACZF,EAAYE,QACd,OAAO,EAGb,IAAS1E,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACpBqE,EAAaJ,EAAKK,QAAQX,EAAqB3D,GAAG,IAAtD,IACI2E,EAAaV,EAAKK,QAAQX,EAAqB3D,GAAG,IAEtD,GACIqE,GACAA,EAAWH,QAAUA,GACrBG,EAAWI,GAAGN,EAAY,QAC1BQ,EAAWD,QACb,OAAO,EAEjB,KAAK5E,EAAA+D,iBACD,IAAS7D,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAGxB,IAFIqE,EAAaJ,EAAKK,QAAQZ,EAAc1D,MAIxCqE,EAAWH,QAAUA,GACrBG,EAAWI,GAAGN,EAAY,OAC5B,OAAO,GAIrB,OAAO,GAIXS,MAAA,SAAMX,EAAMC,EAAQC,EAAYC,GAC5B,IAAIS,EAAyB,GAE7B,OAAQT,GACJ,KAAKtE,EAAAgE,iBACD,IAAK,IAAI9D,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAIqE,EAAaJ,EAAKK,QAAQV,EAAqB5D,GAAG,IAClDuE,EAAcN,EAAKK,QAAQV,EAAqB5D,GAAG,IACnDwE,EAAcP,EAAKK,QAAQV,EAAqB5D,GAAG,IAGnDqE,GACAA,EAAWH,QAAUA,GACrBG,EAAWI,GAAGN,EAAY,QAC1BI,EAAYG,SACZF,EAAYE,SACdG,EAAOC,KAAK,CAACT,EAAYE,EAAaC,IAG5C,IAASxE,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACpBqE,EAAaJ,EAAKK,QAAQX,EAAqB3D,GAAG,IAAtD,IACI2E,EAAaV,EAAKK,QAAQX,EAAqB3D,GAAG,IAGlDqE,GACAA,EAAWH,QAAUA,GACrBG,EAAWI,GAAGN,EAAY,QAC1BQ,EAAWD,SACbG,EAAOC,KAAK,CAACT,EAAYM,IAEnC,KAAK7E,EAAA+D,iBACD,IAAS7D,EAAI,EAAGA,EAAI,EAAGA,IAAK,EACpBqE,EAAaJ,EAAKK,QAAQZ,EAAc1D,MAIxCqE,EAAWH,QAAUA,GACrBG,EAAWI,GAAGN,EAAY,QAC5BU,EAAOC,KAAK,CAACT,KAI3B,OAAOQ,mFC/Kf,SAAiBE,GAKb,SAASC,IACL,IAAIC,GAEJA,EAAaC,SAASC,uBAAuB,eAAe,KAC5CF,EAAWG,UAAUC,OAAO,WAE5CJ,EAAaC,SAASI,cAAiBC,SAASC,KAAI,WACpCP,EAAWG,UAAUK,IAAI,UAX7BV,EAAAW,SAAhB,SAAyBC,GACrBJ,SAASC,KAAOG,GAapBC,OAAOC,iBAAiB,aAAcb,GACtCA,IAhBJ,CAAiBlF,EAAAiF,OAAAjF,EAAAiF,KAAI,oFCErB,IAAAe,EAAAlG,EAAA,GAGImG,EAAkC,CAAC,mBA6B5BjG,EAAAkG,cAA+B,CAOtChC,MAAK,SAACC,EAAMC,EAAQE,GAChB,OAAQH,EAAKC,QAAU4B,EAAA/B,YAAYC,MAC/BC,EAAMC,EAAQ6B,EAAiB3B,IAUvCQ,MAAA,SAAMqB,EAAM/B,EAAQE,GAGhB,IAFA,IAAI8B,EAAsB,GAETC,EAAA,EAAAC,EAAAH,EAAKI,MAAMH,MAAXC,EAAAC,EAAAE,OAAAH,IAAkB,CAA9B,IAAIlC,EAAImC,EAAAD,IACJlC,EAAKC,QAAUpE,EAAAkG,cAAchC,MAC9BC,EAAMC,EAAQE,GAAa6B,EAAK7B,YACjC8B,EAAMpB,KAAKb,GAGlB,OAAOiC,mFC9Df,IAAMK,EAAQ,6BAmBd,SAAgBC,EAAUC,EAAqBC,GAC3C,IAAK,IAAIC,KAAQD,EACbD,EAAQG,aAAaD,EAAMD,EAAUC,IAb7C7G,EAAA+G,UAAA,SAAgEC,EAAYJ,GACxE,IAAID,EAAUvB,SAAS6B,gBAAgBR,EAAOO,GAE9C,OADIJ,GAAWF,EAAUC,EAASC,GAC3BD,GAQX3G,EAAA0G,YAWA1G,EAAAkH,eAAA,SAA+BP,EAAqBQ,GAChD,IAAyB,IAAAd,EAAA,EAAAe,EAAAD,EAAAd,EAAAe,EAAAZ,OAAAH,IAAe,CAAnC,IAAIgB,EAAYD,EAAAf,GACjBM,EAAQW,YAAYD,KAQ5BrH,EAAAuH,eAAA,SAA+BZ,GAG3B,IAFA,IAAIa,EAAeb,EAAQc,WAAWjB,OAE/BgB,KAAiB,GACpBb,EAAQe,YAAYf,EAAQc,WAAW,oFC5C/C,SAAiBE,GAWb,IAAIC,EAUJ,SAAgBC,IACZF,EAAAG,KAAKC,UAAY,OACjBJ,EAAAK,QAAS,EAGb,SAAgBC,EAASC,GACjBN,GAAUA,EAASM,GACvBN,EAAW,KACXC,IA5BOF,EAAAG,KAAoB1C,SAAS+C,eAAe,eAC5CR,EAAAS,YAA2BhD,SAAS+C,eAAe,gBACnDR,EAAAU,eAA8BjD,SAAS+C,eAAe,mBACtDR,EAAAW,aAA4BlD,SAAS+C,eAAe,kBACpDR,EAAAY,aAA4BnD,SAAS+C,eAAe,kBACpDR,EAAAa,aAA4BpD,SAAS+C,eAAe,kBAEpDR,EAAAK,QAAkB,EAKbL,EAAAc,KAAhB,SAAqBC,EAAcC,EAAiBV,GAChDN,EAAAG,KAAKC,UAAYW,EACjBf,EAAAU,eAAeO,UAAYD,EAC3BhB,EAAAU,eAAeQ,MAAMC,QAAUH,EAAU,GAAK,OAC9Cf,EAAWK,EACXN,EAAAK,QAAS,GAGGL,EAAAE,KAAIA,EAKJF,EAAAM,SAAQA,EAMxBN,EAAAW,aAAavC,iBAAiB,QAAS,SAAAgD,GAAS,OAAAd,EAAS,YACzDN,EAAAY,aAAaxC,iBAAiB,QAAS,SAAAgD,GAAS,OAAAd,EAAS,YACzDN,EAAAa,aAAazC,iBAAiB,QAAS,SAAAgD,GAAS,OAAAd,EAAS,YAlC7D,CAAiBjI,EAAA2H,aAAA3H,EAAA2H,WAAU,m7CCE3B,IAAAqB,EAAAlJ,EAAA,IAEAmJ,EAAAnJ,EAAA,IAMAoJ,EAAA,WAyCI,SAAAA,EAEW3C,EAEA4C,EAEA7E,EAEA8E,EAEAC,GARAC,KAAA/C,QAEA+C,KAAAH,UAEAG,KAAAhF,YAEAgF,KAAAF,cAEAE,KAAAD,cAjDJC,KAAAC,KAAO,EAmHlB,OA9DUL,EAAApH,UAAA0H,MAAN,uHACQC,EAA+BR,EAAAS,iBAC/BJ,KAAKK,SAASL,KAAKK,kCAEhBF,GAAcR,EAAAS,iBAAgB,QACtBpD,EAAAgD,KAAKM,cAAL,MAAqB,GAAMN,KAAKO,uBAAXC,EAAAC,wBAEhC,KAFI5F,EAAImC,GAEG,YAEPgD,KAAKU,aAAaV,KAAKU,YAAY7F,GAEnC8F,GAAc,MAECC,EAAAZ,KAAKF,oCAAL/C,EAAA6D,EAAA1D,OACX,GADO0D,EAAA7D,GACM8D,GAAGhG,EAAMmF,OADK,aAC/B,GAAIQ,EAAAC,OAEA,OADAE,GAAc,EACd,8BAHW5D,iBAOnB,IAAK4D,EAAa,YAElBX,KAAKM,aAAezF,MACDiG,EAAAd,KAAKD,oCAALgB,EAAAD,EAAA5D,OAAkB,GAAtB4D,EAAAC,GAAmCF,GAAGb,OAAlB,cAAEQ,EAAAC,iCAAlBM,yBAEnBf,KAAKC,cAEED,KAAKM,aACZH,EAAaR,EAAAqB,eAAeC,MAAMjB,MAC9BA,KAAKkB,WAAWlB,KAAKkB,UAAUrG,iBAIvC,OADImF,KAAKmB,OAAOnB,KAAKmB,MAAMhB,GAC3B,GAAOA,SAIXP,EAAApH,UAAA4I,QAAA,WACIpB,KAAKC,KAAO,EAEZ,IAAiB,IAAAlD,EAAA,EAAAC,EAAAgD,KAAK/C,MAAMH,MAAXC,EAAAC,EAAAE,OAAAH,IAAkB,CAA9B,IAAIlC,EAAImC,EAAAD,GACTlC,EAAKC,OAAS,GACdD,EAAKwG,KAAK3B,EAAA4B,iBAGdtB,KAAKE,SAITN,EAAApH,UAAA+H,WAAA,eAAAgB,EAAAvB,KACI,OAAO,IAAIwB,QAAoB,SAAAC,GAC3BF,EAAKG,WAAa,SAAA7G,GACd4G,EAAO5G,GACH0G,EAAKI,cAAcJ,EAAKI,aAAa9G,OAMrDvD,OAAAC,eAAIqI,EAAApH,UAAA,YAAS,KAAb,WACI,OAAOwH,KAAKH,QAAQG,KAAKC,KAAO,oCAExCL,EArHA,GAAalJ,EAAAkJ,4FCAb,SAAY9G,GACRA,IAAA,mBACAA,IAAA,sBACAA,IAAA,qBACAA,IAAA,oBACAA,IAAA,mBACAA,IAAA,wBACAA,IAAA,wBACAA,IAAA,uBACAA,IAAA,uBAEAA,IAAA,wBACAA,IAAA,uBACAA,IAAA,sBACAA,IAAA,qBACAA,IAAA,0BACAA,IAAA,0BACAA,IAAA,yBACAA,IAAA,yBAEAA,IAAA,0BACAA,IAAA,0BACAA,IAAA,yBACAA,IAAA,yBACAA,IAAA,0BACAA,IAAA,0BACAA,IAAA,yBACAA,IAAA,yBA3BJ,CAAYpC,EAAAoC,YAAApC,EAAAoC,UAAS,KA+BrB,IAAA8I,EAAA,WAII,SAAAA,EAEoB3E,EAEA4E,EAEAC,GAJA9B,KAAA/C,QAEA+C,KAAA6B,IAEA7B,KAAA8B,IAEhB9B,KAAKpJ,EAAIiL,EAAI5E,EAAM8E,OAASD,EAkBpC,OAXIF,EAAApJ,UAAA0C,QAAA,SAAQ8G,GACJ,IAAIC,GAAK,MAASD,IAAS,GACvBE,GAAK,KAASF,IAAS,EACvBtK,GAAK,IAASsK,IAAS,EACvBnL,EAAK,GAASmL,EAEdH,EAAI7B,KAAK6B,EAAInK,EAAIb,EACjBiL,EAAI9B,KAAK8B,EAAII,EAAID,EAErB,OAAOjC,KAAK/C,MAAM/B,QAAQ2G,EAAGC,IAErCF,EA9BA,GAAalL,EAAAkL,OAiCb,IAAAO,EAAA,WAMI,SAAAA,EAEoBC,EAEAL,GAFA/B,KAAAoC,QAEApC,KAAA+B,SAEhB,IAAIjF,EAAgB,GAEpBkD,KAAKlD,MAAQA,EACbkD,KAAK9C,OAASkF,EAAQL,EAEtB,IAAK,IAAIF,EAAI,EAAGA,EAAIO,EAAOP,IACvB,IAAK,IAAIC,EAAI,EAAGA,EAAIC,EAAQD,IAAK,CAC7B,IAAIjH,EAAO,IAAI+G,EAAK5B,KAAM6B,EAAGC,GAC7BhF,EAAMjC,EAAKjE,GAAKiE,GAmBhC,OATIsH,EAAA3J,UAAA0C,QAAA,SAAQ2G,EAAWC,GACf,GACID,EAAI,GAAKA,GAAK7B,KAAKoC,OACnBN,EAAI,GAAKA,GAAK9B,KAAK+B,OACrB,OAAO,KAET,IAAInL,EAAIiL,EAAI7B,KAAK+B,OAASD,EAC1B,OAAO9B,KAAKlD,MAAMlG,IAE1BuL,EAvCA,GAAazL,EAAAyL,2aC1Eb,IAAAvJ,EAAApC,EAAA,GAQA6L,EAAA,SAAAC,GAAA,SAAAD,IAAA,IAAAd,EAAA,OAAAe,KAAAC,MAAAvC,KAAAwC,YAAAxC,YAEWuB,EAAAzG,OAAuB,GAGvByG,EAAAkB,OAAwC,KAuFnD,OA5FgCC,EAAAL,EAAAC,GAoB5BD,EAAA7J,UAAA6C,GAAA,SAAGsH,EAA2CC,GAC1C,GAA0B,iBAAfD,EAAyB,OAAO3C,KAAKyC,OAAOE,GAEvD,IAAIE,EAAiBF,EAErB,GAAkB,QAAdC,EAAqB,CACrB,IAAmB,IAAA7F,EAAA,EAAA+F,EAAAD,EAAA9F,EAAA+F,EAAA5F,OAAAH,IAAgB,CAA9B,IAAIgG,EAAMD,EAAA/F,GACX,IAAKiD,KAAKyC,OAAOM,GAAS,OAAO,EAGrC,OAAO,EAEP,IAAmB,IAAA/F,EAAA,EAAAgG,EAAAH,EAAA7F,EAAAgG,EAAA9F,OAAAF,IAAgB,CAA9B,IAAIiG,EAAMD,EAAAhG,GACX,GAAIgD,KAAKyC,OAAOQ,GAAS,OAAO,EAGpC,OAAO,GAgBfZ,EAAA7J,UAAA0K,KAAA,SAAKP,GACD,GAA0B,iBAAfA,EACP,OAAO3C,KAAKyC,OAAOE,IAAc,EAKrC,IAFA,IAEmB5F,EAAA,EAAAoG,EAFER,EAEF5F,EAAAoG,EAAAjG,OAAAH,IAAgB,CAA9B,IAAIqG,EAAMD,EAAApG,GACXiD,KAAKyC,OAAOW,IAAU,IAgB9Bf,EAAA7J,UAAA6I,KAAA,SAAKsB,GACD,GAA0B,iBAAfA,EACP,OAAO3C,KAAKyC,OAAOE,IAAc,EAKrC,IAFA,IAEmB5F,EAAA,EAAAsG,EAFEV,EAEF5F,EAAAsG,EAAAnG,OAAAH,IAAgB,CAA9B,IAAIuG,EAAMD,EAAAtG,GACXiD,KAAKyC,OAAOa,IAAU,IAK9BhM,OAAAC,eAAI8K,EAAA7J,UAAA,UAAO,KAAX,WACI,MAAuB,KAAhBwH,KAAKlF,wCAEpBuH,EA5FA,CAAgCzJ,EAAAgJ,MAAnBlL,EAAA2L,aAoGb,IAAAkB,EAAA,SAAAjB,GACI,SAAAiB,EAAYnB,EAAeL,GAGvB,IAHJ,IAAAR,EACIe,EAAAvL,KAAAiJ,KAAMoC,EAAOL,IAAO/B,KAEX6B,EAAI,EAAGA,EAAIO,EAAOP,IACvB,IAAK,IAAIC,EAAI,EAAGA,EAAIC,EAAQD,IAAK,CAC7B,IAAIjH,EAAmB,IAAIwH,EAAWd,EAAMM,EAAGC,GAC/CP,EAAKzE,MAAMjC,EAAKjE,GAAKiE,WAIrC,OAXiC6H,EAAAa,EAAAjB,GAWjCiB,EAXA,CAAiC3K,EAAAuJ,WAApBzL,EAAA6M,6FC1Gb,IAAAC,EAAA,WAEA,OADI,SAAmB1I,GAAAkF,KAAAlF,UADvB,GAAapE,EAAA8M,sUCDb,IAAAC,EAAAjN,EAAA,GAIAkN,EAAA,WAKI,SAAAA,EAAmB7G,EAAyB8G,GAAzB3D,KAAAnD,OAAyBmD,KAAA2D,YAJrC3D,KAAA4D,QAAyBH,EAAAhG,UAAU,OACnCuC,KAAA6D,UAA8B,GAI3B,IAAA5G,EAAAJ,EAAAI,MAENwG,EAAArG,UAAU4C,KAAK4D,QAAS,CACpBxB,MAAS,GAAiB,EAAdnF,EAAMmF,MAClBL,OAAU,GAAkB,EAAf9E,EAAM8E,SAGvB,IAAI+B,EAAcL,EAAAhG,UAAU,KACxBsG,EAAYN,EAAAhG,UAAU,KACtBuG,EAAaP,EAAAhG,UAAU,KACvBwG,EAAaR,EAAAhG,UAAU,MA4CnC,SAAwBR,EAAoB+G,GACxC,IAAK,IAAInC,EAAI,EAAGA,EAAI5E,EAAMmF,MAAOP,IAAK,CAClCqC,EAAY,EAAI,KAAS,EAAJrC,EAAK,QAAuB,EAAf5E,EAAM8E,OACxC,IAAIoC,EAAOV,EAAAhG,UAAU,OAAQyG,GAC7BF,EAAWhG,YAAYmG,GAG3B,IAAK,IAAIrC,EAAI,EAAGA,EAAI7E,EAAM8E,OAAQD,IAAK,CACnCoC,EAAY,EAAI,OAAW,EAAJpC,EAAK,MAAoB,EAAd7E,EAAMmF,MACxC,IAAI+B,EAAOV,EAAAhG,UAAU,OAAQyG,GAC7BF,EAAWhG,YAAYmG,IArDvBC,CAAenH,EAAO+G,GAEtBhE,KAAKqE,OAAS,CAACP,EAAaC,EAAWC,EAAYC,GACnDR,EAAA7F,eAAeoC,KAAK4D,QAAS5D,KAAKqE,QAElC,IAAiB,IAAAtH,EAAA,EAAAC,EAAAC,EAAMH,MAANC,EAAAC,EAAAE,OAAAH,IAAa,CAAzB,IAAIlC,EAAImC,EAAAD,GACLuH,EAAW,IAAIC,EAAe1J,GAClCoJ,EAAWjG,YAAYsG,EAASV,SAChC5D,KAAK6D,UAAUnI,KAAK4I,GAGxBtE,KAAK2D,UAAU3F,YAAYgC,KAAK4D,SAEhC5D,KAAKwE,SACLhI,OAAOC,iBAAiB,SAAUuD,KAAKwE,OAAOpM,KAAK4H,OAqB3D,OAlBI0D,EAAAlL,UAAAgM,OAAA,WACQ,IAAEb,EAAF3D,KAAE2D,UAAmB/C,EAArBZ,KAAqBnD,KAAAI,MAASmF,EAAAxB,EAAAwB,MAAOL,EAAAnB,EAAAmB,OAEzC/B,KAAK4D,QAAQrE,MAAMkF,UAAY,SAG3B,IAHsCC,KAAKC,IAC3ChB,EAAUiB,aAAuB,EAARxC,GACzBuB,EAAUkB,cAAyB,EAAT9C,IACnB,KAGf2B,EAAAlL,UAAAsM,OAAA,WACI,IAAqB,IAAA/H,EAAA,EAAAC,EAAAgD,KAAK6D,UAAL9G,EAAAC,EAAAE,OAAAH,IAAc,CAAlBC,EAAAD,GAA6B+H,WAGlDpB,EAAAlL,UAAAyD,OAAA,WACI,IAAqB,IAAAc,EAAA,EAAAC,EAAAgD,KAAK6D,UAAL9G,EAAAC,EAAAE,OAAAH,IAAc,CAAlBC,EAAAD,GAA6Bd,SAC9CwH,EAAAxF,eAAe+B,KAAKqE,OAAO,IAC3BZ,EAAAxF,eAAe+B,KAAKqE,OAAO,KAEnCX,EApDA,GAAahN,EAAAgN,kBAsDb,IAAIQ,EAAW,CACXhN,EAAK,GACL6N,OAAU,OACVC,eAAgB,OAiBpB,IAAAT,EAAA,WAKI,SAAAA,EAAmB1J,GAAAmF,KAAAnF,OAJZmF,KAAA4D,QAAuBH,EAAAhG,UAAU,KACjCuC,KAAAlF,OAAuB,GACvBkF,KAAAyC,OAAwC,GAG3CzC,KAAKlF,OAASD,EAAKC,OACnBkF,KAAKyC,OAAMwC,EAAA,GAAQpK,EAAK4H,QACxBzC,KAAK8E,SAkGb,OA/FIP,EAAA/L,UAAAsM,OAAA,WACU,IAAAjK,EAAAmF,KAAAnF,KAEN,GACImF,KAAKlF,QAAUD,EAAKC,QACpBkF,KAAKyC,OAAO,oBACZ5H,EAAK4H,OAAO,oBACZzC,KAAKyC,OAAO,oBACZ5H,EAAK4H,OAAO,oBACZzC,KAAKyC,OAAO,oBACZ5H,EAAK4H,OAAO,oBACZzC,KAAKyC,OAAO,oBACZ5H,EAAK4H,OAAO,mBAThB,CAYA,IAAIyC,EAAa,CACbhO,EAAK,GACLiO,KAAQ,OACRJ,OAAU,GACVC,eAAgB,OAGhBI,EAAgB,EAATvK,EAAKgH,EAAQ,EACpBwD,EAAgB,EAATxK,EAAKiH,EAAQ,EACpBwD,EAAgB,EAATzK,EAAKgH,EAAQ,EACpB0D,EAAgB,EAAT1K,EAAKiH,EAAQ,EAExB,OAAQjH,EAAKC,QACT,IAAK,GACD2I,EAAAxF,eAAe+B,KAAK4D,SACpB,MAGJ,IAAK,IACDsB,EAAc,EACV,MAAKE,EAAO,KAAG,KAAIC,EAAO,KAAG,uDAKjCH,EAAmB,OAAI,UACvB,MAGJ,IAAK,IACDA,EAAc,EACV,KAAKE,EAAI,IAAIC,EAAI,MAAMC,EAAI,IAAIC,EAAI,MAC9BD,EAAI,IAAID,EAAI,MAAMD,EAAI,IAAIG,EAEnCL,EAAmB,OAAI,YAW/B,GANKrK,EAAKQ,GAAG,qBAAoB6J,EAAmB,OAAI,QAGnDrK,EAAKQ,GAAG,CAAC,kBAAmB,mBAAoB,SACnD6J,EAAmB,OAAI,QAEpBlF,KAAKlF,OAiBH,CACH,IAAI0K,EAAQN,EAAmB,OAE/BzB,EAAArG,UACI4C,KAAK4D,QAAQzF,WAAW,GACxB,CAAE4G,OAAUS,SArBX3K,EAAKS,UACFT,EAAKQ,GAAG,oBACR6J,EAAW,gBAAkB,MAC7BlF,KAAK4D,QAAQ5F,YAAYyF,EAAAhG,UAAU,OAAQyH,IAE3CA,EAAW,gBAAkB,MAC7BA,EAAmB,OAAI,UACvBlF,KAAK4D,QAAQ5F,YAAYyF,EAAAhG,UAAU,OAAQyH,KACpCrK,EAAKQ,GAAG,mBACf2E,KAAK4D,QAAQ5F,YAAYyF,EAAAhG,UAAU,OAAQyH,KACpCrK,EAAKQ,GAAG,mBACf2E,KAAK4D,QAAQ5F,YAAYyF,EAAAhG,UAAU,OAAQyH,MAcvDlF,KAAKlF,OAASD,EAAKC,OACnBkF,KAAKyC,OAAMwC,EAAA,GAAQpK,EAAK4H,UAG5B8B,EAAA/L,UAAAyD,OAAA,WACI+D,KAAKlF,OAAS,GACdkF,KAAKyC,OAAS,GACdgB,EAAAxF,eAAe+B,KAAK4D,UAE5BW,EA1GA,GAAa7N,EAAA6N,gGC/Eb,IAAAd,EAAAjN,EAAA,GAGAkG,EAAAlG,EAAA,GAGMiP,EAAe,CACjBC,GAAI,OACJC,EAAK,UACLC,EAAK,aAGLC,EAAU,CACVC,GAAM,GACNC,GAAM,GACNrO,EAAK,MACLyN,KAAQ,IAGZ,SAASa,EAAUnE,EAAWC,EAAW0D,GAIrC,OAHAK,EAAY,GAAI,IAAO,EAAJhE,EAAQ,KAC3BgE,EAAY,GAAI,IAAO,EAAJ/D,EAAQ,KAC3B+D,EAAc,KAAIL,EACX/B,EAAAhG,UAAU,SAAUoI,GAG/BnP,EAAAuP,iBAAA,SAAiCnJ,EAAqBhC,EAAsB0D,GAGxE,IAFA,IAAIgH,EAAQC,EAAa3K,GAEIiC,EAAA,EAAAmJ,EAAApJ,EAAAC,EAAAmJ,EAAAhJ,OAAAH,IAAO,CAA3B,IAAAC,EAAAkJ,EAAAnJ,GAAE8E,EAAA7E,EAAA6E,EAAGC,EAAA9E,EAAA8E,EAAG9E,EAAAlC,QAEb0D,EAAKR,YAAYgI,EAAUnE,EAAGC,EAAG0D,MAIzC,IAAItB,EAAW,CACXhN,EAAK,GACL8N,eAAgB,MAChBD,OAAU,GACVI,KAAQ,OACRgB,MAAS,sBAGb,SAASC,EAAWC,EAAoBC,EAAsBd,EAAehH,GACzE0F,EAAY,EAAI,MAAgB,EAAXmC,EAAOxE,EAAQ,KAAG,KAAe,EAAXwE,EAAOvE,EAAQ,KAC1DoC,EAAiB,OAAIsB,EAErB,IAAiB,IAAAzI,EAAA,EAAAwJ,EAAAD,EAAAvJ,EAAAwJ,EAAArJ,OAAAH,IAAQ,CAApB,IAAIlC,EAAI0L,EAAAxJ,GACTmH,EAAY,GAAK,OAAe,EAATrJ,EAAKgH,EAAQ,KAAG,KAAa,EAAThH,EAAKiH,EAAQ,KAG5D,IAAI0E,EAAO/C,EAAAhG,UAAU,OAAQyG,GAC7B1F,EAAKR,YAAYwI,GAGrB,SAASC,EAAiB5L,EAAkB2K,EAAehH,EAAkBxD,EAA4BiF,EAAcpD,GAC/GhC,EAAKQ,GAAG,oBAAsBwB,EAAKoD,KAAOA,IAC9CpF,EAAKqI,KAAK,mBAEVwD,WAAW,WACP,KAAI7J,EAAKoD,KAAOA,GAGhB,IAFA,IAEkBlD,EAAA,EAAA4J,EAFLjK,EAAA/B,YAAYa,MAAMX,EAAMA,EAAKC,OAAQ,CAAC,mBAAoBE,GAErD+B,EAAA4J,EAAAzJ,OAAAH,IAAQ,CAArB,IAAID,EAAK6J,EAAA5J,GACVD,EAAM8J,UAEN,IAAI3L,EAAa6B,EAAMA,EAAMI,OAAS,GAEjCjC,EAAWI,GAAG,qBACf+K,EAAWvL,EAAMiC,EAAO0I,EAAOhH,GAC/BiI,EAAiBxL,EAAYuK,EAAOhH,EAAMxD,EAAWiF,EAAMpD,MAGpE,MAGPnG,EAAAmQ,mBAAA,SAAmC/L,EAAsB0D,EAAkB3B,GAIvE,IAHe,IAAAC,EAAAD,EAAAI,MAAAH,MAAS9B,EAAA6B,EAAA7B,UAAWiF,EAAApD,EAAAoD,KAC/BuF,EAAQC,EAAa3K,GAERiC,EAAA,EAAA+J,EAAAhK,EAAAC,EAAA+J,EAAA5J,OAAAH,KAARlC,EAAIiM,EAAA/J,IAAgBsE,KAAK,mBAElC,IAAiB,IAAArE,EAAA,EAAA+J,EAAAjK,EAAAE,EAAA+J,EAAA7J,OAAAF,IAAO,CAAnB,IAAInC,KAAIkM,EAAA/J,IACA3B,GAAG,oBAAsBR,EAAKC,QAAUA,GAC7C2L,EAAiB5L,EAAM2K,EAAOhH,EAAMxD,EAAWiF,EAAMpD,oFCjFjE,IAAAmK,EAAAxQ,EAAA,GAEWE,EAAAuQ,UAA0B,CACjCpG,GAAA,SAAGhG,EAAkBgC,GACjB,IAAKhC,EAAKS,QAAS,OAAO,EAEP,IAAAR,EAAA+B,EAAAqK,UAAApM,OAAUE,EAAA6B,EAAA7B,UAE7B,GAAI6B,EAAKoD,KAAO,EACZpF,EAAKC,OAASA,EACdD,EAAKqI,KAAK,uBACP,KAAI8D,EAAApK,cAAchC,MAAMC,EAAMC,EAAQE,GAGtC,OAAO,EAFVH,EAAKC,OAASA,EACdD,EAAKqI,KAAK,mBAGd,OAAO,mFClBf,IAAAxG,EAAAlG,EAAA,GAGI2Q,EAAgC,CAAC,mBAOrC,SAASC,EAAQvM,EAAkBG,GAC/B,IAAIH,EAAKQ,GAAG,mBAAZ,CACAR,EAAKqI,KAAK,mBAMV,IAJA,IAIkBnG,EAAA,EAAAwJ,EAJW7J,EAAA/B,YAAYa,MACrCX,EAAMA,EAAKC,OAAQqM,EAAenM,GAGpB+B,EAAAwJ,EAAArJ,OAAAH,IAAM,CAAEqK,EAAZb,EAAAxJ,GAA0B,GAAI/B,KAIrCtE,EAAA2Q,gBAAgC,CACvCxG,GAAE,SAAC7D,GACC,QADCC,EAAAD,EAAAC,MAAOjC,EAAAgC,EAAAhC,UACS+B,EAAA,EAAA6D,EAAA3D,EAAMH,MAANC,EAAA6D,EAAA1D,OAAAH,IAAa,CAAzB,IAAIlC,EAAI+F,EAAA7D,GACLlC,EAAKQ,GAAG,oBACR+L,EAAQvM,EAAMG,MAOnBtE,EAAA4Q,gBAAgC,CACvCzG,GAAE,SAAC7D,GACC,QAAiBD,EAAA,EAAA6D,EADhB5D,EAAAC,MACsBH,MAANC,EAAA6D,EAAA1D,OAAAH,IAAa,CAAjB6D,EAAA7D,GACJsE,KAAK,qGCrCtB,IAWWkG,EAXXC,EAAAhR,EAAA,GACAiR,EAAAjR,EAAA,GAEAA,EAAA,IACAA,EAAA,IACAA,EAAA,IAEK2F,SAASC,MACVoL,EAAA7L,KAAKW,SAAS,SAGPiL,EAGR/K,QAFc,KAAIgL,EAAA7L,KACjB4L,EAAmB,WAAIE,EAAApJ,0FCb3B,IAAAmJ,EAAAhR,EAAA,GAEMkR,EAAgC5L,SAAS+C,eAAe,gBACxD8I,EAAgC7L,SAAS+C,eAAe,gBAE9D6I,EAAiBjL,iBAAiB,QAAS,SAAAgD,GAAS,OAAA+H,EAAA7L,KAAKW,SAAS,UAClEqL,EAAiBlL,iBAAiB,QAAS,SAAAgD,GAAS,OAAA+H,EAAA7L,KAAKW,SAAS,s4CCNlEiF,EAAAvB,sDAAA,IAAAwH,EAAAhR,EAAA,GACAoR,EAAApR,EAAA,GACAqR,EAAArR,EAAA,IACAsR,EAAAtR,EAAA,IACAkG,EAAAlG,EAAA,GACAuR,EAAAvR,EAAA,IAEAwR,EAAAxR,EAAA,IACAwQ,EAAAxQ,EAAA,GACAiR,EAAAjR,EAAA,GACAyR,EAAAzR,EAAA,IACA0R,EAAA1R,EAAA,IACAiN,EAAAjN,EAAA,GAEsCsF,SAAS+C,eAAe,gBAE7CpC,iBAAiB,QAAS,WACvCgL,EAAApJ,WAAWc,KAAK,qBAAsB,QAAS,SAAAE,GAC5B,UAAXA,GAAqBmI,EAAA7L,KAAKW,SAAS,YAI/C,IAAIW,EAAQ,IAAI4K,EAAAtE,YAAY,EAAG,GAC3B1D,EAAU,CAAC,IAAIiI,EAAAtE,aAAa,KAAM,IAAIsE,EAAAtE,aAAa,MACnD1D,EAA8B,CAACmI,EAAAhB,WAC/BlH,EAA8B,CAACmI,EAAAZ,gBAAiBY,EAAAb,iBAEhDxK,EAAO,IAAI+K,EAAAhI,WACX3C,EAAO4C,EAASnD,EAAAhC,iBAChBoF,EACAC,GAGA4D,EAAY7H,SAAS+C,eAAe,cACpCsJ,EAAY,IAAIJ,EAAArE,gBAAgB7G,EAAM8G,GAE1CnH,OAAOC,iBAAiB,aAAc,WACb,SAAjBN,SAASC,MAAiBS,EAAKuE,YAGvC+G,EAAUvE,QAAQnH,iBAAiB,QAAS,SAAUgD,GAClD,IAAIoC,EAAY6C,KAAK0D,MAAM3I,EAAM4I,QAAU,GACvCvG,EAAY4C,KAAK0D,MAAM3I,EAAM6I,QAAU,GACvCzN,EAAOoC,EAAM/B,QAAQ2G,EAAGC,GAExB2F,EAAApJ,WAAWK,QACX7B,EAAK6E,YAAY7E,EAAK6E,WAAW7G,KAGzCgC,EAAKwD,QAAU8H,EAAUlM,OAAO7D,KAAK+P,GAErCtL,EAAKsE,MAAQ,SAAAhB,GACT,IAAIrB,EAAc,GACdC,EAAiB,GAErB,OAAQoB,GACJ,KAAK,EACDrB,EAAc,OACdC,EAAiB,QACjB,MACJ,KAAK,EACDD,EAAc,OACdC,EAAiB,QACjB,MACJ,KAAK,EACDD,EAAc,OACdC,EAAiB,QAIzB0I,EAAApJ,WAAWc,KAAQL,EAAW,iBAAkBC,EAAgB,SAAAM,GAC7C,UAAXA,GAAqBxC,EAAKuE,aAItC,IAAImH,EAAiC,GAErC1L,EAAK6D,YAAc,WAAM,OAAA6H,EAAmB1L,EAAKqK,UAAUpM,QAC3D+B,EAAK8E,aAAewG,EAAUrD,OAAO1M,KAAK+P,GAE1CtL,EAAKqE,UAAY,kBAAAsH,EAAAjH,OAAA,6DACb4G,EAAUrD,SAENhK,EAAS+B,EAAKqK,UAAUpM,OACxBgC,EAAQkK,EAAApK,cAAcpB,MACtBqB,EAAM/B,EAAQ4B,EAAAhC,kBAGlB+I,EAAAxF,eAAekK,EAAU9D,OAAO,IAChCZ,EAAAxF,eAAekK,EAAU9D,OAAO,IAEhC2D,EAAA/B,iBAAiBnJ,EAAOhC,EAAQqN,EAAU9D,OAAO,IACjD2D,EAAAnB,mBAAmB0B,EAAkBJ,EAAU9D,OAAO,GAAIxH,YAG9DA,EAAKqD,QAIF1D,OADc,KAAIK,iFC5EVnG,EAAA4K,gBAAkC,CACzC,kBAAmB,kBAAmB,kBAAmB,kGCrB7D,IAAA0F,EAAAxQ,EAAA,GAMaE,EAAA0J,iBAAqC,EAGrC1J,EAAA+R,iBAAqC,EAGrC/R,EAAAgS,iBAAqC,EAGrChS,EAAAiS,iBAAqC,EAYvCjS,EAAAsK,eAAiC,CAKxCC,MAAA,SAAMpE,GACF,GAAIA,EAAKoD,KAAO,EAAG,OAAOvJ,EAAA0J,iBAEpB,IAAA8G,EAAArK,EAAAqK,UAEF0B,EAAwB5B,EAAApK,cAAcpB,MAAMqB,EAAM,KAClDgM,EAAwB7B,EAAApK,cAAcpB,MAAMqB,EAAM,KAElDiM,EAAsDC,MAA5BH,EAAsB,GAChDI,EAAsDD,MAA5BF,EAAsB,GAEpD,GACIC,GACAE,EACF,OAAOtS,EAAA0J,iBAET,GAAwB,KAApB8G,EAAUpM,OAAe,CACzB,GAAIgO,EAAyB,OAAOpS,EAAA0J,iBAC/B,GAAI4I,EAAyB,OAAOtS,EAAAgS,sBACtC,GAAwB,KAApBxB,EAAUpM,OAAe,CAChC,GAAIkO,EAAyB,OAAOtS,EAAA0J,iBAC/B,GAAI0I,EAAyB,OAAOpS,EAAA+R,iBAG7C,OAAO/R,EAAAiS,kGC1Df,IAAAnB,EAAAhR,EAAA,GACAiR,EAAAjR,EAAA,GACAoR,EAAApR,EAAA,GACAqR,EAAArR,EAAA,IACAsR,EAAAtR,EAAA,IACAkG,EAAAlG,EAAA,GACAuR,EAAAvR,EAAA,IAEAwR,EAAAxR,EAAA,IACAwQ,EAAAxQ,EAAA,GACAyR,EAAAzR,EAAA,IACA0R,EAAA1R,EAAA,IACAiN,EAAAjN,EAAA,GAEMyS,EAAgCnN,SAAS+C,eAAe,gBACxDqK,EAAgCpN,SAAS+C,eAAe,aAE9DoK,EAAiBxM,iBAAiB,QAAS,SAAAgD,GACvCgI,EAAApJ,WAAWc,KAAK,qBAAsB,QAAS,SAAAE,GAC5B,UAAXA,GAAqBmI,EAAA7L,KAAKW,SAAS,YAI/C,IAAIW,EAAQ,IAAI4K,EAAAtE,YAAY,EAAG,GAC3B1D,EAAU,CAAC,IAAIiI,EAAAtE,aAAa,KAAM,IAAIsE,EAAAtE,aAAa,MACnD1D,EAA8B,CAACmI,EAAAhB,WAC/BlH,EAA8B,CAACmI,EAAAZ,gBAAiBY,EAAAb,iBAEhDxK,EAAO,IAAI+K,EAAAhI,WACX3C,EAAO4C,EAASnD,EAAAhC,iBAChBoF,EACAC,GAGA4D,EAAY7H,SAAS+C,eAAe,cACpCsJ,EAAY,IAAIJ,EAAArE,gBAAgB7G,EAAM8G,GAE1CnH,OAAOC,iBAAiB,aAAc,WACb,SAAjBN,SAASC,MAAiBS,EAAKuE,YAGvC+G,EAAUvE,QAAQnH,iBAAiB,QAAS,SAAUgD,GAClD,IAAIoC,EAAY6C,KAAK0D,MAAM3I,EAAM4I,QAAU,GACvCvG,EAAY4C,KAAK0D,MAAM3I,EAAM6I,QAAU,GACvCzN,EAAOoC,EAAM/B,QAAQ2G,EAAGC,GAGxB2F,EAAApJ,WAAWK,QACe,MAA1B7B,EAAKqK,UAAUpM,QACfqO,EAAStM,EAAKoD,OACdkJ,EAAStM,EAAKoD,MAAMmJ,QAAQvO,GAAQ,GAGpCgC,EAAK6E,YAAY7E,EAAK6E,WAAW7G,KAGzCgC,EAAKwD,QAAU,WACXoH,EAAApJ,WAAWc,KAAK,SAAU,mCAAoC,MAC9DtC,EAAKyD,aAAe+I,EAASxM,EAAKoD,MAClCkI,EAAUlM,UAGdY,EAAKsE,MAAQ,SAAAhB,GACT,IAAIrB,EAAc,GACdC,EAAiB,GAErB,OAAQoB,GACJ,KAAK,EACDrB,EAAc,OACdC,EAAiB,QACjB,MACJ,KAAK,EACDD,EAAc,OACdC,EAAiB,QACjB,MACJ,KAAK,EACDD,EAAc,OACdC,EAAiB,QAIzB0I,EAAApJ,WAAWc,KAAQL,EAAW,iBAAkBC,EAAgB,SAAAM,GAC7C,UAAXA,GAAqBxC,EAAKuE,aAItC,IAAImH,EAAiC,GAErC1L,EAAK6D,YAAc,WACf6H,EAAmB1L,EAAKqK,UAAUpM,OAE9BwO,EAAYzM,EAAKoD,QACjBiJ,EAAiBK,UAAYD,EAAYzM,EAAKoD,QAItDpD,EAAK8E,aAAewG,EAAUrD,OAAO1M,KAAK+P,GAE1CtL,EAAKqE,UAAY,WACbiH,EAAUrD,SAEV,IAAIhK,EAAS+B,EAAKqK,UAAUpM,OACxBgC,EAAQkK,EAAApK,cAAcpB,MACtBqB,EAAM/B,EAAQ4B,EAAAhC,kBAYlB,GATA+I,EAAAxF,eAAekK,EAAU9D,OAAO,IAChCZ,EAAAxF,eAAekK,EAAU9D,OAAO,IAEhC2D,EAAA/B,iBACInJ,EACAD,EAAKqK,UAAUpM,OACfqN,EAAU9D,OAAO,IAGjB8E,EAAStM,EAAKoD,MAAO,CACrB,IAAsB,IAAAlD,EAAA,EAAAC,EAAAmL,EAAU9D,OAAO,GAAGlG,WAApBpB,EAAAC,EAAAE,OAAAH,IAA+D,CAAhF,IAAIyM,EAASxM,EAAAD,GACd0G,EAAArG,UAAUoM,EAAyB,CAAEC,QAAW,QAGpDzB,EAAA/B,iBACIkD,EAAStM,EAAKoD,MACdpD,EAAKqK,UAAUpM,OACfqN,EAAU9D,OAAO,IAIzB2D,EAAAnB,mBAAmB0B,EAAkBJ,EAAU9D,OAAO,GAAIxH,GAE1D,IAAIoD,EAAOpD,EAAKoD,KAShB,OAPIpD,EAAKoD,KAAO,EACZpD,EAAKyD,aAAe+I,EAASxM,EAAKoD,MAC/ByG,WAAW,WACV7J,EAAKoD,OAASA,GACdpD,EAAK6E,YAAY7E,EAAK6E,WAAW2H,EAASxM,EAAKoD,QACpD,KAEKpD,EAAKoD,MACT,KAAK,GACDwH,EAAApJ,WAAWc,KAAK,SAAU,8BAA+B,MACzD,MACJ,KAAK,GACDsI,EAAApJ,WAAWc,KAAK,SAAU,kBAAmB,WACzCqI,EAAA7L,KAAKW,SAAS,YAK9B,IAAI+M,EAA2C,CAC3CK,EAAGzM,EAAM/B,QAAQ,EAAG,GACpByO,EAAG1M,EAAM/B,QAAQ,EAAG,GACpB0O,EAAG3M,EAAM/B,QAAQ,EAAG,GACpB2O,EAAG5M,EAAM/B,QAAQ,EAAG,GACpB4O,EAAG7M,EAAM/B,QAAQ,EAAG,GACpB6O,EAAG9M,EAAM/B,QAAQ,EAAG,GACpB8O,GAAI/M,EAAM/B,QAAQ,EAAG,GACrB+O,GAAIhN,EAAM/B,QAAQ,EAAG,GACrBgP,GAAIjN,EAAM/B,QAAQ,EAAG,GACrBiP,GAAIlN,EAAM/B,QAAQ,EAAG,GACrBkP,GAAInN,EAAM/B,QAAQ,EAAG,GACrBmP,GAAIpN,EAAM/B,QAAQ,EAAG,GACrBoP,GAAIrN,EAAM/B,QAAQ,EAAG,GACrBqP,GAAItN,EAAM/B,QAAQ,EAAG,GACrBsP,GAAIvN,EAAM/B,QAAQ,EAAG,GACrBuP,GAAIxN,EAAM/B,QAAQ,EAAG,GACrBwP,GAAIzN,EAAM/B,QAAQ,EAAG,GACrByP,GAAI1N,EAAM/B,QAAQ,EAAG,GACrB0P,GAAI3N,EAAM/B,QAAQ,EAAG,GACrB2P,GAAI5N,EAAM/B,QAAQ,EAAG,GACrB4P,GAAI7N,EAAM/B,QAAQ,EAAG,GACrB6P,GAAI9N,EAAM/B,QAAQ,EAAG,GACrB8P,GAAI/N,EAAM/B,QAAQ,EAAG,GACrB+P,GAAIhO,EAAM/B,QAAQ,EAAG,GACrBgQ,GAAIjO,EAAM/B,QAAQ,EAAG,GACrBiQ,GAAIlO,EAAM/B,QAAQ,EAAG,IAGrBiO,EAA6C,CAC7CiC,EAAG,CAACnO,EAAM/B,QAAQ,EAAG,GAAI+B,EAAM/B,QAAQ,EAAG,IAC1CmQ,EAAG,CAACpO,EAAM/B,QAAQ,EAAG,GAAI+B,EAAM/B,QAAQ,EAAG,IAC1CoQ,EAAG,CAACrO,EAAM/B,QAAQ,EAAG,IACrBqQ,EAAG,CAACtO,EAAM/B,QAAQ,EAAG,IACrBsQ,GAAI,CAACvO,EAAM/B,QAAQ,EAAG,IACtBuQ,GAAI,CACAxO,EAAM/B,QAAQ,EAAG,GACjB+B,EAAM/B,QAAQ,EAAG,GACjB+B,EAAM/B,QAAQ,EAAG,GACjB+B,EAAM/B,QAAQ,EAAG,IAErBwQ,GAAI,CAACzO,EAAM/B,QAAQ,EAAG,IACtByQ,GAAI,CAAC1O,EAAM/B,QAAQ,EAAG,IACtB0Q,GAAI,CAAC3O,EAAM/B,QAAQ,EAAG,IACtB2Q,GAAI,CAAC5O,EAAM/B,QAAQ,EAAG,IACtB4Q,GAAI,CAAC7O,EAAM/B,QAAQ,EAAG,IACtB6Q,GAAI,CAAC9O,EAAM/B,QAAQ,EAAG,IACtB8Q,GAAI,CAAC/O,EAAM/B,QAAQ,EAAG,IACtB+Q,GAAI,CAAChP,EAAM/B,QAAQ,EAAG,IACtBgR,GAAI,CAACjP,EAAM/B,QAAQ,EAAG,IACtBiR,GAAI,CAAClP,EAAM/B,QAAQ,EAAG,IACtBkR,GAAI,CAACnP,EAAM/B,QAAQ,EAAG,IACtBmR,GAAI,CAACpP,EAAM/B,QAAQ,EAAG,IACtBoR,GAAI,CAACrP,EAAM/B,QAAQ,EAAG,IACtBqR,GAAI,CAACtP,EAAM/B,QAAQ,EAAG,GAAI+B,EAAM/B,QAAQ,EAAG,IAC3CsR,GAAI,CAACvP,EAAM/B,QAAQ,EAAG,IACtBuR,GAAI,CAACxP,EAAM/B,QAAQ,EAAG,KAG1BiO,EAAS,IAAMA,EAAS,IACxBA,EAAS,IAAMA,EAAS,IACxBA,EAAS,IAAMA,EAAS,IAExB,IAAIG,EAA0C,CAC1CI,EAAG,SACHE,EAAG,SACHC,EAAG,WACHC,EAAG,WACHC,EAAG,WACHC,GAAI,SACJI,GAAI,SACJI,GAAI,SACJO,GAAI,UAGa,SAAjB5O,SAASC,MAAiBS,EAAKqD","file":"script.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","import { GRID_DRCT } from \"../../core/GridBoard\";\nimport { RelatiRule, RelatiSymbol, RelatiStatus } from \"../RelatiDefs\";\nimport { RelatiGrid } from \"../RelatiBoard\";\n\nlet {\n    DRCT_F, DRCT_B, DRCT_R, DRCT_L,\n    DRCT_FR, DRCT_FL, DRCT_BR, DRCT_BL,\n    DRCT_2F, DRCT_2B, DRCT_2R, DRCT_2L,\n    DRCT_2FR, DRCT_2FL, DRCT_2BR, DRCT_2BL,\n    DRCT_FFR, DRCT_FFL, DRCT_BBR, DRCT_BBL,\n    DRCT_FRR, DRCT_FLL, DRCT_BRR, DRCT_BLL\n} = GRID_DRCT;\n\n/** 一般Relati路徑 */\nconst NORMAL_ROUTES = [\n    DRCT_F, DRCT_B, DRCT_R, DRCT_L,\n    DRCT_FR, DRCT_FL, DRCT_BR, DRCT_BL\n];\n\n/** 遠程Relati路徑 */\nconst REMOTE_NORMAL_ROUTES = [\n    [DRCT_2F, DRCT_F],\n    [DRCT_2B, DRCT_B],\n    [DRCT_2R, DRCT_R],\n    [DRCT_2L, DRCT_L],\n    [DRCT_2FR, DRCT_FR],\n    [DRCT_2FL, DRCT_FL],\n    [DRCT_2BR, DRCT_BR],\n    [DRCT_2BL, DRCT_BL]\n];\n\n/** 遠程穩定Relati路徑 */\nconst REMOTE_STABLE_ROUTES = [\n    [DRCT_FFR, DRCT_2F, DRCT_F],\n    [DRCT_FFR, DRCT_FR, DRCT_F],\n    [DRCT_FFR, DRCT_FR, DRCT_R],\n    [DRCT_FFL, DRCT_2F, DRCT_F],\n    [DRCT_FFL, DRCT_FL, DRCT_F],\n    [DRCT_FFL, DRCT_FL, DRCT_L],\n    [DRCT_BBR, DRCT_2B, DRCT_B],\n    [DRCT_BBR, DRCT_BR, DRCT_B],\n    [DRCT_BBR, DRCT_BR, DRCT_R],\n    [DRCT_BBL, DRCT_2B, DRCT_B],\n    [DRCT_BBL, DRCT_BL, DRCT_B],\n    [DRCT_BBL, DRCT_BL, DRCT_L],\n    [DRCT_FRR, DRCT_FR, DRCT_F],\n    [DRCT_FRR, DRCT_2R, DRCT_R],\n    [DRCT_FRR, DRCT_FR, DRCT_R],\n    [DRCT_FLL, DRCT_FL, DRCT_F],\n    [DRCT_FLL, DRCT_2L, DRCT_L],\n    [DRCT_FLL, DRCT_FL, DRCT_L],\n    [DRCT_BRR, DRCT_BR, DRCT_B],\n    [DRCT_BRR, DRCT_2R, DRCT_R],\n    [DRCT_BRR, DRCT_BR, DRCT_R],\n    [DRCT_BLL, DRCT_BL, DRCT_B],\n    [DRCT_BLL, DRCT_2L, DRCT_L],\n    [DRCT_BLL, DRCT_BL, DRCT_L]\n];\n\nexport type RelatiRouteType = 0 | 1;\n\n/** 使用一般Relati路徑類型 */\nexport const BY_NORMAL_RELATI = 0;\n\n/** 使用通用Relati路徑類型 */\nexport const BY_COMMON_RELATI = 1;\n\n/** 連結路徑規範 */\ninterface RelatiRoute extends RelatiRule {\n    /** 判斷是否符合連結路徑規範 */\n    allow(\n        grid: RelatiGrid,\n        symbol: RelatiSymbol,\n        statusList: RelatiStatus[],\n        routeType: number\n    ): boolean;\n\n    /** 取得符合連結路徑規範的路徑 */\n    trace(\n        grid: RelatiGrid,\n        symbol: RelatiSymbol,\n        statusList: RelatiStatus[],\n        routeType: RelatiRouteType\n    ): RelatiGrid[][];\n}\n\n/** 連結路徑規範 */\nexport let RelatiRoute: RelatiRoute = {\n    /** 判斷是否符合連結路徑規範 */\n    allow(grid, symbol, statusList, routeType) {\n        switch (routeType) {\n            case BY_COMMON_RELATI:\n                for (let i = 0; i < 24; i++) {\n                    let targetGrid = grid.getGrid(REMOTE_STABLE_ROUTES[i][0]);\n                    let middleGrid1 = grid.getGrid(REMOTE_STABLE_ROUTES[i][1]);\n                    let middleGrid2 = grid.getGrid(REMOTE_STABLE_ROUTES[i][2]);\n\n                    if (\n                        targetGrid &&\n                        targetGrid.symbol == symbol &&\n                        targetGrid.is(statusList, \"any\") &&\n                        middleGrid1.isSpace &&\n                        middleGrid2.isSpace\n                    ) return true;\n                }\n\n                for (let i = 0; i < 8; i++) {\n                    let targetGrid = grid.getGrid(REMOTE_NORMAL_ROUTES[i][0]);\n                    let middleGrid = grid.getGrid(REMOTE_NORMAL_ROUTES[i][1]);\n\n                    if (\n                        targetGrid &&\n                        targetGrid.symbol == symbol &&\n                        targetGrid.is(statusList, \"any\") &&\n                        middleGrid.isSpace\n                    ) return true;\n                }\n            case BY_NORMAL_RELATI:\n                for (let i = 0; i < 8; i++) {\n                    let targetGrid = grid.getGrid(NORMAL_ROUTES[i]);\n\n                    if (\n                        targetGrid &&\n                        targetGrid.symbol == symbol &&\n                        targetGrid.is(statusList, \"any\")\n                    ) return true;\n                }\n        }\n\n        return false;\n    },\n\n    /** 取得符合連結路徑規範的路徑 */\n    trace(grid, symbol, statusList, routeType) {\n        let routes: RelatiGrid[][] = [];\n\n        switch (routeType) {\n            case BY_COMMON_RELATI:\n                for (let i = 0; i < 24; i++) {\n                    let targetGrid = grid.getGrid(REMOTE_STABLE_ROUTES[i][0]);\n                    let middleGrid1 = grid.getGrid(REMOTE_STABLE_ROUTES[i][1]);\n                    let middleGrid2 = grid.getGrid(REMOTE_STABLE_ROUTES[i][2]);\n\n                    if (\n                        targetGrid &&\n                        targetGrid.symbol == symbol &&\n                        targetGrid.is(statusList, \"any\") &&\n                        middleGrid1.isSpace &&\n                        middleGrid2.isSpace\n                    ) routes.push([targetGrid, middleGrid1, middleGrid2]);\n                }\n\n                for (let i = 0; i < 8; i++) {\n                    let targetGrid = grid.getGrid(REMOTE_NORMAL_ROUTES[i][0]);\n                    let middleGrid = grid.getGrid(REMOTE_NORMAL_ROUTES[i][1]);\n\n                    if (\n                        targetGrid &&\n                        targetGrid.symbol == symbol &&\n                        targetGrid.is(statusList, \"any\") &&\n                        middleGrid.isSpace\n                    ) routes.push([targetGrid, middleGrid]);\n                }\n            case BY_NORMAL_RELATI:\n                for (let i = 0; i < 8; i++) {\n                    let targetGrid = grid.getGrid(NORMAL_ROUTES[i]);\n\n                    if (\n                        targetGrid &&\n                        targetGrid.symbol == symbol &&\n                        targetGrid.is(statusList, \"any\")\n                    ) routes.push([targetGrid]);\n                }\n        }\n\n        return routes;\n    }\n};","export namespace Page {\n    export function switchTo(pageName: string) {\n        location.hash = pageName;\n    }\n\n    function switchToPage() {\n        let activePage;\n\n        activePage = document.getElementsByClassName(\"page active\")[0];\n        if (activePage) activePage.classList.remove(\"active\");\n\n        activePage = document.querySelector(`${location.hash}-page`);\n        if (activePage) activePage.classList.add(\"active\");\n    }\n\n    window.addEventListener(\"hashchange\", switchToPage);\n    switchToPage();\n}","import { RelatiGrid } from \"../RelatiBoard\";\nimport { RelatiGame } from \"../RelatiGame\";\nimport { RelatiRoute, RelatiRouteType } from \"./RelatiRoute\";\nimport { RelatiSymbol, RelatiRule, RelatiStatus } from \"../RelatiDefs\";\n\nlet placementStatus: RelatiStatus[] = [\"relati-repeater\"];\n\n/** 設置判定 */\ninterface PlacementRule extends RelatiRule {\n    /**\n     * 判定棋盤格是否可設置符號\n     * @param grid 棋盤格\n     * @param symbol 符號\n     * @param routeType 連結路徑類型\n     */\n    allow(\n        grid: RelatiGrid,\n        symbol: RelatiSymbol,\n        routeType: RelatiRouteType\n    ): boolean;\n\n    /**\n     * 取得可設置符號的棋盤格\n     * @param game 遊戲主體\n     * @param symbol 符號\n     */\n    trace(\n        game: RelatiGame,\n        symbol: RelatiSymbol,\n        routeType?: RelatiRouteType\n    ): RelatiGrid[];\n}\n\n/** 設置判定 */\nexport let PlacementRule: PlacementRule = {\n    /**\n     * 判定棋盤格是否可設置符號\n     * @param grid 棋盤格\n     * @param symbol 符號\n     * @param routeType 連結路徑類型\n     */\n    allow(grid, symbol, routeType) {\n        return !grid.symbol && RelatiRoute.allow(\n            grid, symbol, placementStatus, routeType\n        );\n    },\n\n    /**\n     * 取得可設置符號的棋盤格\n     * @param game 遊戲主體\n     * @param symbol 符號\n     * @param routeType 連結路徑類型\n     */\n    trace(game, symbol, routeType?) {\n        let grids: RelatiGrid[] = [];\n\n        for (let grid of game.board.grids) {\n            if (!grid.symbol && PlacementRule.allow(\n                grid, symbol, routeType || game.routeType\n            )) grids.push(grid);\n        }\n\n        return grids;\n    }\n};","const SVGNS = \"http://www.w3.org/2000/svg\";\ntype SVGAttr = { [name: string]: string };\n\n/**\n * 建立SVG元素\n * @param tagName SVG標籤名稱\n * @param attribute SVG屬性\n */\nexport function createSVG<T extends keyof SVGElementTagNameMap>(tagName: T, attribute?: SVGAttr): SVGElementTagNameMap[T] {\n    let element = document.createElementNS(SVGNS, tagName);\n    if (attribute) updateSVG(element, attribute);\n    return element;\n}\n\n/**\n * 變更SVG屬性\n * @param element SVG元素\n * @param attribute SVG屬性\n */\nexport function updateSVG(element: SVGElement, attribute: SVGAttr) {\n    for (let name in attribute) {\n        element.setAttribute(name, attribute[name]);\n    }\n}\n\n/**\n * 增加SVG子元素\n * @param element SVG元素\n * @param childElements SVG子元素\n */\nexport function appendSVGChild(element: SVGElement, childElements: SVGElement[]) {\n    for (let childElement of childElements) {\n        element.appendChild(childElement);\n    }\n}\n\n/**\n * 移除SVG子元素\n * @param element SVG元素\n */\nexport function removeSVGChild(element: SVGElement) {\n    let elementCount = element.childNodes.length;\n\n    while (elementCount-- > 0) {\n        element.removeChild(element.childNodes[0]);\n    }\n}","export namespace MessageBox {\n    export let view: HTMLElement = document.getElementById(\"message-box\") as HTMLElement;\n    export let messageIcon: HTMLElement = document.getElementById(\"message-icon\") as HTMLElement;\n    export let messageContent: HTMLElement = document.getElementById(\"message-content\") as HTMLElement;\n    export let acceptButton: HTMLElement = document.getElementById(\"message-accept\") as HTMLElement;\n    export let rejectButton: HTMLElement = document.getElementById(\"message-reject\") as HTMLElement;\n    export let verifyButton: HTMLElement = document.getElementById(\"message-verify\") as HTMLElement;\n\n    export let isShow: boolean = false;\n\n    export type MessageCallback = (result: string) => void;\n    let callback: MessageCallback | null;\n\n    export function show(type: string, message: string, response: MessageCallback | null) {\n        view.className = type;\n        messageContent.innerText = message;\n        messageContent.style.display = message ? \"\" : \"none\";\n        callback = response;\n        isShow = true;\n    }\n\n    export function hide() {\n        view.className = \"none\";\n        isShow = false;\n    }\n\n    export function response(result: string) {\n        if (callback) callback(result);\n        callback = null;\n        hide();\n    }\n\n    acceptButton.addEventListener(\"click\", event => response(\"accept\"));\n    rejectButton.addEventListener(\"click\", event => response(\"reject\"));\n    verifyButton.addEventListener(\"click\", event => response(\"verify\"));\n}","import { RelatiBoard, RelatiGrid } from \"./RelatiBoard\";\nimport { RelatiRouteType } from \"./rule/RelatiRoute\";\nimport { RelatiEffect, RelatiAction, AllRelatiStatus } from \"./RelatiDefs\";\nimport { RelatiPlayer } from \"./RelatiPlayer\";\nimport { RelatiGameResult, GAME_RESULT_NONE, WinnerDecision } from \"./rule/WinnerDecision\";\n\nexport interface RelatiGameState {\n    grid: RelatiGrid;\n}\n\nexport class RelatiGame {\n    /** 回合 */\n    public turn = 0;\n\n    /** 已選擇棋盤格 */\n    public selectedGrid?: RelatiGrid;\n\n    /**\n     * 選取棋盤格放置\n     * @param grid 棋盤格\n     */\n    public selectGrid?: (grid: RelatiGrid) => void;\n\n    /**\n     * 遊戲回合開始事件\n     * @param grid 棋盤格\n     */\n    public onturnstart?: (grid: RelatiGrid) => void;\n\n    /**\n     * 遊戲回合結束事件\n     * @param grid 棋盤格\n     */\n    public onturnend?: (grid: RelatiGrid) => void;\n\n    /**\n     * 棋盤格選取事件\n     * @param grid 棋盤格\n     */\n    public ongridselect?: (grid: RelatiGrid) => void;\n\n    /**\n     * 遊戲開始事件\n     */\n    public onstart?: Function;\n\n    /**\n     * 遊戲結束事件\n     */\n    public onend?: (gameResult: RelatiGameResult) => void;\n\n    constructor(\n        /** 棋盤 */\n        public board: RelatiBoard,\n        /** 玩家 */\n        public players: RelatiPlayer[],\n        /** Relati路徑類型 */\n        public routeType: RelatiRouteType,\n        /** 可用行動 */\n        public gridActions: RelatiAction[],\n        /** 可用技能 */\n        public gridEffects: RelatiEffect[]\n    ) { }\n\n    /** 開始 */\n    async start() {\n        let gameResult: RelatiGameResult = GAME_RESULT_NONE;\n        if (this.onstart) this.onstart();\n\n        while (gameResult == GAME_RESULT_NONE) {\n            let grid = this.selectedGrid || await this.gridSelect();\n\n            if (!grid) continue;\n\n            if (this.onturnstart) this.onturnstart(grid);\n\n            let actionValid = false;\n\n            for (let action of this.gridActions) {\n                if (await action.do(grid, this)) {\n                    actionValid = true;\n                    break;\n                }\n            }\n\n            if (!actionValid) continue;\n\n            this.selectedGrid = grid;\n            for (let effect of this.gridEffects) await effect.do(this);\n\n            this.turn++;\n\n            delete this.selectedGrid;\n            gameResult = WinnerDecision.state(this);\n            if (this.onturnend) this.onturnend(grid);\n        }\n\n        if (this.onend) this.onend(gameResult);\n        return gameResult;\n    }\n\n    /** 重新開始 */\n    restart() {\n        this.turn = 0;\n\n        for (let grid of this.board.grids) {\n            grid.symbol = \"\";\n            grid.lost(AllRelatiStatus);\n        }\n\n        this.start();\n    }\n\n    /** 等待格子選取 */\n    gridSelect() {\n        return new Promise<RelatiGrid>(select => {\n            this.selectGrid = grid => {\n                select(grid);\n                if (this.ongridselect) this.ongridselect(grid);\n            };\n        });\n    }\n\n    /** 目前玩家 */\n    get nowPlayer() {\n        return this.players[this.turn % 2];\n    }\n}","/**\n * 棋盤格方向\n * C: (x = 0, y = 0)\n * F: (x = x, y - 1)\n * B: (x = x, y + 1)\n * R: (x + 1, y = y)\n * L: (x - 1, y = y)\n * 16進制表示\n * 0xFBRL\n */\nexport enum GRID_DRCT {\n    DRCT_C = 0x0000,\n    DRCT_F = 0x1000,\n    DRCT_B = 0x0100,\n    DRCT_R = 0x0010,\n    DRCT_L = 0x0001,\n    DRCT_FR = 0x1010,\n    DRCT_FL = 0x1001,\n    DRCT_BR = 0x0110,\n    DRCT_BL = 0x0101,\n\n    DRCT_2F = 0x2000,\n    DRCT_2B = 0x0200,\n    DRCT_2R = 0x0020,\n    DRCT_2L = 0x0002,\n    DRCT_2FR = 0x2020,\n    DRCT_2FL = 0x2002,\n    DRCT_2BR = 0x0220,\n    DRCT_2BL = 0x0202,\n\n    DRCT_FFR = 0x2010,\n    DRCT_FFL = 0x2001,\n    DRCT_BBR = 0x0210,\n    DRCT_BBL = 0x0201,\n    DRCT_FRR = 0x1020,\n    DRCT_FLL = 0x1002,\n    DRCT_BRR = 0x0120,\n    DRCT_BLL = 0x0102\n}\n\n/** 棋盤格 */\nexport class Grid {\n    /** 原始陣列索引 */\n    public readonly i: number;\n\n    constructor(\n        /** 所屬棋盤 */\n        public readonly board: GridBoard,\n        /** X座標 */\n        public readonly x: number,\n        /** Y座標 */\n        public readonly y: number\n    ) {\n        this.i = x * board.height + y;\n    }\n\n    /**\n     * 取得相對位置的棋盤格\n     * @param drct 方向，使用 GRID_DRCT 可簡單取得\n     */\n    getGrid(drct: number) {\n        let f = (0xF000 & drct) >> 12;\n        let b = (0x0F00 & drct) >> 8;\n        let r = (0x00F0 & drct) >> 4;\n        let l = (0x000F & drct);\n\n        let x = this.x + r - l;\n        let y = this.y + b - f;\n\n        return this.board.getGrid(x, y);\n    }\n}\n\n/** 棋盤 */\nexport class GridBoard {\n    /** 所有棋盤格 */\n    public readonly grids: Grid[];\n    /** 棋盤格總數 */\n    public readonly length: number;\n\n    constructor(\n        /** 棋盤寬度 */\n        public readonly width: number,\n        /** 棋盤高度 */\n        public readonly height: number\n    ) {\n        let grids: Grid[] = [];\n\n        this.grids = grids;\n        this.length = width * height;\n\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                let grid = new Grid(this, x, y);\n                grids[grid.i] = grid;\n            }\n        }\n    }\n\n    /**\n     * 取得絕對位置的棋盤格\n     * @param x X座標\n     * @param y Y座標\n     */\n    getGrid(x: number, y: number) {\n        if (\n            x < 0 || x >= this.width ||\n            y < 0 || y >= this.height\n        ) return null;\n\n        let i = x * this.height + y;\n        return this.grids[i];\n    }\n}","import { GridBoard, Grid } from \"../core/GridBoard\";\nimport { RelatiStatus, RelatiSymbol } from \"./RelatiDefs\";\n\n/** Relati棋盤格 */\nexport interface RelatiGrid extends Grid {\n    getGrid(drct: number): RelatiGrid;\n}\n\nexport class RelatiGrid extends Grid {\n    /** 符號 */\n    public symbol: RelatiSymbol = \"\";\n\n    /** 狀態存儲 */\n    public status: { [status: string]: boolean } = {};\n\n    /**\n     * 判斷是否符合狀態\n     * @param statusName 狀態名稱\n     */\n    is(statusName: RelatiStatus): boolean;\n\n    /**\n     * 判斷是否符合所有狀態或任一狀態\n     * @param statusNameList 狀態名稱列表\n     * @param matchType 所有狀態 | 任一狀態\n     */\n    is(statusNameList: RelatiStatus[], matchType: \"all\" | \"any\"): boolean;\n\n    is(statusName: RelatiStatus | RelatiStatus[], matchType?: \"all\" | \"any\") {\n        if (typeof statusName === \"string\") return this.status[statusName];\n\n        let statusNameList = statusName;\n\n        if (matchType === \"all\") {\n            for (let status of statusNameList) {\n                if (!this.status[status]) return false;\n            }\n\n            return true;\n        } else {\n            for (let status of statusNameList) {\n                if (this.status[status]) return true;\n            }\n\n            return false;\n        }\n    }\n\n    /**\n     * 獲得狀態\n     * @param status 狀態名稱\n     */\n    gain(status: RelatiStatus): void;\n\n    /**\n     * 獲得多個狀態\n     * @param statusNameList 狀態名稱列表\n     */\n    gain(statusNameList: RelatiStatus[]): void;\n\n    gain(statusName: RelatiStatus | RelatiStatus[]) {\n        if (typeof statusName === \"string\") {\n            return this.status[statusName] = true;\n        }\n\n        let statusNameList = statusName;\n\n        for (let status of statusNameList) {\n            this.status[status] = true;\n        }\n    }\n\n    /**\n     * 失去狀態\n     * @param status 狀態名稱\n     */\n    lost(status: RelatiStatus): void;\n\n    /**\n     * 失去多個狀態\n     * @param statusNameList 狀態名稱列表\n     */\n    lost(statusNameList: RelatiStatus[]): void;\n\n    lost(statusName: RelatiStatus | RelatiStatus[]) {\n        if (typeof statusName === \"string\") {\n            return this.status[statusName] = false;\n        }\n\n        let statusNameList = statusName;\n\n        for (let status of statusNameList) {\n            this.status[status] = false;\n        }\n    }\n\n    /** 該格視為空格 */\n    get isSpace() {\n        return this.symbol === \"\";\n    }\n}\n\n/** Relati棋盤 */\nexport interface RelatiBoard extends GridBoard {\n    grids: RelatiGrid[];\n    getGrid(x: number, y: number): RelatiGrid;\n}\n\nexport class RelatiBoard extends GridBoard {\n    constructor(width: number, height: number) {\n        super(width, height);\n\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                let grid: RelatiGrid = new RelatiGrid(this, x, y);\n                this.grids[grid.i] = grid;\n            }\n        }\n    }\n}","import { RelatiSymbol } from \"./RelatiDefs\";\n\nexport class RelatiPlayer {\n    constructor(public symbol: RelatiSymbol) { }\n}","import { RelatiGame } from \"../main/RelatiGame\";\nimport { createSVG, updateSVG, appendSVGChild, removeSVGChild } from \"../core/SVGProcess\";\nimport { RelatiBoard, RelatiGrid } from \"../main/RelatiBoard\";\nimport { RelatiSymbol } from \"../main/RelatiDefs\";\n\nexport class RelatiBoardView {\n    public context: SVGSVGElement = createSVG(\"svg\");\n    public gridViews: RelatiGridView[] = [];\n    public layers: SVGGElement[];\n\n    constructor(public game: RelatiGame, public container: HTMLElement) {\n        let { board } = game;\n\n        updateSVG(this.context, {\n            \"width\": `${board.width * 5}`,\n            \"height\": `${board.height * 5}`\n        });\n\n        let routesLayer = createSVG(\"g\");\n        let dotsLayer = createSVG(\"g\");\n        let linesLayer = createSVG(\"g\");\n        let gridsLayer = createSVG(\"g\");\n        appendGridLine(board, linesLayer);\n\n        this.layers = [routesLayer, dotsLayer, linesLayer, gridsLayer];\n        appendSVGChild(this.context, this.layers);\n\n        for (let grid of board.grids) {\n            let gridView = new RelatiGridView(grid);\n            gridsLayer.appendChild(gridView.context);\n            this.gridViews.push(gridView);\n        }\n\n        this.container.appendChild(this.context);\n\n        this.resize();\n        window.addEventListener(\"resize\", this.resize.bind(this));\n    }\n\n    resize() {\n        let { container, game: { board: { width, height } } } = this;\n\n        this.context.style.transform = \"scale(\" + Math.min(\n            container.clientWidth / (width * 5),\n            container.clientHeight / (height * 5)\n        ) * 0.95 + \")\";\n    }\n\n    update() {\n        for (let gridView of this.gridViews) gridView.update();\n    }\n\n    remove() {\n        for (let gridView of this.gridViews) gridView.remove();\n        removeSVGChild(this.layers[0]);\n        removeSVGChild(this.layers[1]);\n    }\n}\n\nlet lineAttr = {\n    \"d\": \"\",\n    \"stroke\": \"#888\",\n    \"stroke-width\": \"0.4\"\n};\n\nfunction appendGridLine(board: RelatiBoard, linesLayer: SVGGElement) {\n    for (let x = 1; x < board.width; x++) {\n        lineAttr[\"d\"] = `M ${x * 5} 0 V ${board.height * 5}`;\n        let line = createSVG(\"path\", lineAttr);\n        linesLayer.appendChild(line);\n    }\n\n    for (let y = 1; y < board.height; y++) {\n        lineAttr[\"d\"] = `M 0 ${y * 5} H ${board.width * 5}`;\n        let line = createSVG(\"path\", lineAttr);\n        linesLayer.appendChild(line);\n    }\n}\n\nexport class RelatiGridView {\n    public context: SVGGElement = createSVG(\"g\");\n    public symbol: RelatiSymbol = \"\";\n    public status: { [status: string]: boolean } = {};\n\n    constructor(public grid: RelatiGrid) {\n        this.symbol = grid.symbol;\n        this.status = { ...grid.status };\n        this.update();\n    }\n\n    update() {\n        let { grid } = this;\n\n        if (\n            this.symbol == grid.symbol &&\n            this.status[\"relati-launcher\"] ==\n            grid.status[\"relati-launcher\"] &&\n            this.status[\"relati-repeater\"] ==\n            grid.status[\"relati-repeater\"] &&\n            this.status[\"relati-receiver\"] ==\n            grid.status[\"relati-receiver\"] &&\n            this.status[\"attack-selected\"] ==\n            grid.status[\"attack-selected\"]\n        ) return;\n\n        let symbolAttr = {\n            \"d\": \"\",\n            \"fill\": \"none\",\n            \"stroke\": \"\",\n            \"stroke-width\": \"0.6\"\n        };\n\n        let srtX = grid.x * 5 + 1;\n        let srtY = grid.y * 5 + 1;\n        let endX = grid.x * 5 + 4;\n        let endY = grid.y * 5 + 4;\n\n        switch (grid.symbol) {\n            case \"\": {\n                removeSVGChild(this.context);\n                break;\n            }\n\n            case \"O\": {\n                symbolAttr[\"d\"] = (\n                    `M ${srtX + 1.5} ${srtY + 1.5} ` +\n                    \"m 0 -1.5 \" +\n                    \"a 1.5 1.5 0 0 1, 0 3 \" +\n                    \"a 1.5 1.5 0 0 1, 0 -3\"\n                );\n                symbolAttr[\"stroke\"] = \"crimson\";\n                break;\n            }\n\n            case \"X\": {\n                symbolAttr[\"d\"] = (\n                    `M ${srtX} ${srtY} L ${endX} ${endY} ` +\n                    `M ${endX} ${srtY} L ${srtX} ${endY}`\n                );\n                symbolAttr[\"stroke\"] = \"royalblue\";\n                break;\n            }\n        }\n\n        if (!grid.is(\"relati-repeater\")) symbolAttr[\"stroke\"] = \"#666\";\n\n        if (\n            !grid.is([\"relati-launcher\", \"relati-receiver\"], \"any\")\n        ) symbolAttr[\"stroke\"] = \"#bbb\";\n\n        if (!this.symbol) {\n            if (!grid.isSpace) {\n                if (grid.is(\"relati-launcher\")) {\n                    symbolAttr[\"stroke-width\"] = \"1.2\";\n                    this.context.appendChild(createSVG(\"path\", symbolAttr));\n\n                    symbolAttr[\"stroke-width\"] = \"0.6\";\n                    symbolAttr[\"stroke\"] = \"#f2f2f2\";\n                    this.context.appendChild(createSVG(\"path\", symbolAttr));\n                } else if (grid.is(\"relati-repeater\")) {\n                    this.context.appendChild(createSVG(\"path\", symbolAttr));\n                } else if (grid.is(\"relati-receiver\")) {\n                    this.context.appendChild(createSVG(\"path\", symbolAttr));\n                } else {\n                    this.context.appendChild(createSVG(\"path\", symbolAttr));\n                }\n            }\n        } else {\n            let color = symbolAttr[\"stroke\"];\n\n            updateSVG(\n                this.context.childNodes[0] as SVGElement,\n                { \"stroke\": color }\n            );\n        }\n\n        this.symbol = grid.symbol;\n        this.status = { ...grid.status };\n    }\n\n    remove() {\n        this.symbol = \"\";\n        this.status = {};\n        removeSVGChild(this.context);\n    }\n}","import { createSVG } from \"../core/SVGProcess\";\nimport { RelatiGrid } from \"../main/RelatiBoard\";\nimport { RelatiGame } from \"../main/RelatiGame\";\nimport { RelatiRoute, RelatiRouteType } from \"../main/rule/RelatiRoute\";\nimport { RelatiSymbol } from \"../main/RelatiDefs\";\n\nconst SYMBOL_COLOR = {\n    \"\": \"#666\",\n    \"O\": \"crimson\",\n    \"X\": \"royalblue\"\n};\n\nlet dotAttr = {\n    \"cx\": \"\",\n    \"cy\": \"\",\n    \"r\": \"0.5\",\n    \"fill\": \"\"\n};\n\nfunction createDot(x: number, y: number, color: string) {\n    dotAttr[\"cx\"] = `${x * 5 + 2.5}`;\n    dotAttr[\"cy\"] = `${y * 5 + 2.5}`;\n    dotAttr[\"fill\"] = color;\n    return createSVG(\"circle\", dotAttr);\n}\n\nexport function createHintEffect(grids: RelatiGrid[], symbol: RelatiSymbol, view: SVGElement) {\n    let color = SYMBOL_COLOR[symbol];\n\n    for (let { x, y, symbol } of grids) {\n        if (symbol) continue;\n        view.appendChild(createDot(x, y, color));\n    }\n}\n\nlet lineAttr = {\n    \"d\": \"\",\n    \"stroke-width\": \"0.5\",\n    \"stroke\": \"\",\n    \"fill\": \"none\",\n    \"class\": \"relati-effect-line\"\n};\n\nfunction createLine(source: RelatiGrid, traces: RelatiGrid[], color: string, view: SVGElement) {\n    lineAttr[\"d\"] = `M ${source.x * 5 + 2.5} ${source.y * 5 + 2.5}`;\n    lineAttr[\"stroke\"] = color;\n\n    for (let grid of traces) {\n        lineAttr[\"d\"] += ` L ${grid.x * 5 + 2.5} ${grid.y * 5 + 2.5}`;\n    }\n\n    let path = createSVG(\"path\", lineAttr);\n    view.appendChild(path);\n}\n\nfunction createRelatiLine(grid: RelatiGrid, color: string, view: SVGElement, routeType: RelatiRouteType, turn: number, game: RelatiGame) {\n    if (grid.is(\"effect-activate\") || game.turn > turn) return;\n    grid.gain(\"effect-activate\");\n\n    setTimeout(() => {\n        if (game.turn > turn) return;\n        let traces = RelatiRoute.trace(grid, grid.symbol, [\"relati-receiver\"], routeType);\n\n        for (let grids of traces) {\n            grids.reverse();\n\n            let targetGrid = grids[grids.length - 1];\n\n            if (!targetGrid.is(\"effect-activate\")) {\n                createLine(grid, grids, color, view);\n                createRelatiLine(targetGrid, color, view, routeType, turn, game);\n            }\n        }\n    }, 250);\n}\n\nexport function createRelatiEffect(symbol: RelatiSymbol, view: SVGElement, game: RelatiGame) {\n    let { board: { grids }, routeType, turn } = game;\n    let color = SYMBOL_COLOR[symbol];\n\n    for (let grid of grids) grid.lost(\"effect-activate\");\n\n    for (let grid of grids) {\n        if (grid.is(\"relati-launcher\") && grid.symbol == symbol) {\n            createRelatiLine(grid, color, view, routeType, turn, game);\n        }\n    }\n}","import { RelatiAction } from \"../RelatiDefs\";\nimport { RelatiGrid } from \"../RelatiBoard\";\nimport { RelatiGame } from \"../RelatiGame\";\nimport { PlacementRule } from \"../rule/Placement\";\n\nexport let Placement: RelatiAction = {\n    do(grid: RelatiGrid, game: RelatiGame) {\n        if (!grid.isSpace) return false;\n\n        let { nowPlayer: { symbol }, routeType } = game;\n\n        if (game.turn < 2) {\n            grid.symbol = symbol;\n            grid.gain(\"relati-launcher\");\n        } else if (PlacementRule.allow(grid, symbol, routeType)) {\n            grid.symbol = symbol;\n            grid.gain(\"relati-receiver\");\n        } else return false;\n\n        return true;\n    }\n};","import { RelatiGrid } from \"../RelatiBoard\";\nimport { RelatiRoute, RelatiRouteType } from \"../rule/RelatiRoute\";\nimport { RelatiEffect, RelatiStatus } from \"../RelatiDefs\";\n\nlet restoreStatus: RelatiStatus[] = [\"relati-receiver\"];\n\n/**\n * 恢復棋盤格Relati的中繼機能\n * @param grid 棋盤格\n * @param routeType 路徑類型\n */\nfunction restore(grid: RelatiGrid, routeType: RelatiRouteType) {\n    if (grid.is(\"relati-repeater\")) return;\n    grid.gain(\"relati-repeater\");\n\n    let traces: RelatiGrid[][] = RelatiRoute.trace(\n        grid, grid.symbol, restoreStatus, routeType\n    );\n\n    for (let grids of traces) restore(grids[0], routeType);\n}\n\n/** 恢復Relati中繼機能 */\nexport let RestoreRepeater: RelatiEffect = {\n    do({ board, routeType }) {\n        for (let grid of board.grids) {\n            if (grid.is(\"relati-launcher\")) {\n                restore(grid, routeType);\n            }\n        }\n    }\n};\n\n/** 破壞Relati中繼機能 */\nexport let DestoryRepeater: RelatiEffect = {\n    do({ board }) {\n        for (let grid of board.grids) {\n            grid.lost(\"relati-repeater\");\n        }\n    }\n};","import { Page } from \"./ts/view/Page\";\nimport { MessageBox } from \"./ts/view/MessageBox\";\n\nimport \"./ts/page/MainPage\";\nimport \"./ts/page/GamePage\";\nimport \"./ts/page/HelpPage\";\n\nif (!location.hash) {\n    Page.switchTo(\"main\");\n}\n\n(function (global: any) {\n    global[\"Page\"] = Page;\n    global[\"MessageBox\"] = MessageBox;\n})(window);","import { Page } from \"../view/Page\";\n\nconst toGamePageButton: HTMLElement = document.getElementById(\"main-to-game\") as HTMLElement;\nconst toHelpPageButton: HTMLElement = document.getElementById(\"main-to-help\") as HTMLElement;\n\ntoGamePageButton.addEventListener(\"click\", event => Page.switchTo(\"game\"));\ntoHelpPageButton.addEventListener(\"click\", event => Page.switchTo(\"help\"));","import { Page } from \"../view/Page\";\nimport { RelatiGame } from \"../main/RelatiGame\";\nimport { RelatiBoard } from \"../main/RelatiBoard\";\nimport { RelatiPlayer } from \"../main/RelatiPlayer\";\nimport { BY_COMMON_RELATI } from \"../main/rule/RelatiRoute\";\nimport { RelatiBoardView } from \"../view/RelatiBoard\";\nimport { RelatiSymbol, RelatiEffect, RelatiAction } from \"../main/RelatiDefs\";\nimport { createHintEffect, createRelatiEffect } from \"../view/RelatiEffect\";\nimport { PlacementRule } from \"../main/rule/Placement\";\nimport { MessageBox } from \"../view/MessageBox\";\nimport { Placement } from \"../main/skill/Placement\";\nimport { DestoryRepeater, RestoreRepeater } from \"../main/skill/Relati\";\nimport { removeSVGChild } from \"../core/SVGProcess\";\n\nconst toMainPageButton: HTMLElement = document.getElementById(\"game-to-main\") as HTMLElement;\n\ntoMainPageButton.addEventListener(\"click\", () => {\n    MessageBox.show(\"yorn accept reject\", \"確認離開？\", message => {\n        if (message == \"accept\") Page.switchTo(\"main\");\n    });\n});\n\nlet board = new RelatiBoard(9, 9);\nlet players = [new RelatiPlayer(\"O\"), new RelatiPlayer(\"X\")];\nlet gridActions: RelatiAction[] = [Placement];\nlet gridEffects: RelatiEffect[] = [DestoryRepeater, RestoreRepeater];\n\nlet game = new RelatiGame(\n    board, players, BY_COMMON_RELATI,\n    gridActions,\n    gridEffects\n);\n\nlet container = document.getElementById(\"game-board\") as HTMLElement;\nlet boardView = new RelatiBoardView(game, container);\n\nwindow.addEventListener(\"hashchange\", () => {\n    if (location.hash == \"#game\") game.restart();\n});\n\nboardView.context.addEventListener(\"click\", function (event: MouseEvent) {\n    let x: number = Math.floor(event.offsetX / 5),\n        y: number = Math.floor(event.offsetY / 5),\n        grid = board.getGrid(x, y);\n\n    if (MessageBox.isShow) return;\n    if (game.selectGrid) game.selectGrid(grid);\n});\n\ngame.onstart = boardView.remove.bind(boardView);\n\ngame.onend = gameResult => {\n    let messageIcon = \"\";\n    let messageContent = \"\";\n\n    switch (gameResult) {\n        case 1:\n            messageIcon = \"owin\";\n            messageContent = \"圈方獲勝！\";\n            break;\n        case 2:\n            messageIcon = \"xwin\";\n            messageContent = \"叉方獲勝！\";\n            break;\n        case 3:\n            messageIcon = \"draw\";\n            messageContent = \"無人獲勝！\";\n            break;\n    }\n\n    MessageBox.show(`${messageIcon} accept reject`, messageContent, message => {\n        if (message == \"accept\") game.restart();\n    });\n};\n\nlet prevPlayerSymbol: RelatiSymbol = \"\";\n\ngame.onturnstart = () => prevPlayerSymbol = game.nowPlayer.symbol;\ngame.ongridselect = boardView.update.bind(boardView);\n\ngame.onturnend = async () => {\n    boardView.update();\n\n    let symbol = game.nowPlayer.symbol;\n    let grids = PlacementRule.trace(\n        game, symbol, BY_COMMON_RELATI\n    );\n\n    removeSVGChild(boardView.layers[0]);\n    removeSVGChild(boardView.layers[1]);\n\n    createHintEffect(grids, symbol, boardView.layers[1]);\n    createRelatiEffect(prevPlayerSymbol, boardView.layers[0], game);\n};\n\ngame.start();\n\n(function (global: any) {\n    global[\"game\"] = game;\n})(window);","import { RelatiGrid } from \"./RelatiBoard\";\nimport { RelatiGame } from \"./RelatiGame\";\n\nexport type RelatiSymbol = \"\" | \"O\" | \"X\";\nexport type RelatiStatus = (\n    \"relati-launcher\" | \"relati-repeater\" | \"relati-receiver\" | \"effect-activate\"\n);\n\nexport interface RelatiRule {\n    allow?(...state: any[]): boolean;\n    trace?(...state: any[]): any[];\n    state?(...state: any[]): number;\n}\n\nexport interface RelatiAction {\n    do(grid: RelatiGrid, game: RelatiGame, ...state: any[]): boolean | Promise<boolean>;\n}\n\nexport interface RelatiEffect {\n    do(game: RelatiGame, ...state: any[]): void;\n}\n\nexport let AllRelatiStatus: RelatiStatus[] = [\n    \"relati-launcher\", \"relati-repeater\", \"relati-receiver\", \"effect-activate\"\n];","import { RelatiRule } from \"../RelatiDefs\";\nimport { RelatiGame } from \"../RelatiGame\";\nimport { PlacementRule } from \"./Placement\";\n\n/** 遊戲勝負結果 */\nexport type RelatiGameResult = 0 | 1 | 2 | 3;\n\n/** 尚無結果 */\nexport const GAME_RESULT_NONE: RelatiGameResult = 0;\n\n/** 玩家O勝利 */\nexport const GAME_RESULT_OWIN: RelatiGameResult = 1;\n\n/** 玩家X勝利 */\nexport const GAME_RESULT_XWIN: RelatiGameResult = 2;\n\n/** 平手 */\nexport const GAME_RESULT_DRAW: RelatiGameResult = 3;\n\n/** 勝負判定 */\ninterface WinnerDecision extends RelatiRule {\n    /**\n     * 判定遊戲是否已分出勝負\n     * @param game 遊戲主體\n     */\n    state(game: RelatiGame): RelatiGameResult;\n}\n\n/** 勝負判定 */\nexport let WinnerDecision: WinnerDecision = {\n    /**\n     * 判定遊戲是否已分出勝負\n     * @param game 遊戲主體\n     */\n    state(game: RelatiGame) {\n        if (game.turn < 2) return GAME_RESULT_NONE;\n\n        let { nowPlayer } = game;\n\n        let playerOPlaceableGrids = PlacementRule.trace(game, \"O\");\n        let playerXPlaceableGrids = PlacementRule.trace(game, \"X\");\n\n        let playerOHasPlaceableGrid = playerOPlaceableGrids[0] != undefined;\n        let playerXHasPlaceableGrid = playerXPlaceableGrids[0] != undefined;\n\n        if (\n            playerOHasPlaceableGrid &&\n            playerXHasPlaceableGrid\n        ) return GAME_RESULT_NONE;\n\n        if (nowPlayer.symbol == \"O\") {\n            if (playerOHasPlaceableGrid) return GAME_RESULT_NONE;\n            else if (playerXHasPlaceableGrid) return GAME_RESULT_XWIN;\n        } else if (nowPlayer.symbol == \"X\") {\n            if (playerXHasPlaceableGrid) return GAME_RESULT_NONE;\n            else if (playerOHasPlaceableGrid) return GAME_RESULT_OWIN;\n        }\n\n        return GAME_RESULT_DRAW;\n    }\n}","import { Page } from \"../view/Page\";\nimport { MessageBox } from \"../view/MessageBox\";\nimport { RelatiGame } from \"../main/RelatiGame\";\nimport { RelatiBoard, RelatiGrid } from \"../main/RelatiBoard\";\nimport { RelatiPlayer } from \"../main/RelatiPlayer\";\nimport { BY_COMMON_RELATI } from \"../main/rule/RelatiRoute\";\nimport { RelatiBoardView } from \"../view/RelatiBoard\";\nimport { RelatiSymbol, RelatiEffect, RelatiAction } from \"../main/RelatiDefs\";\nimport { createHintEffect, createRelatiEffect } from \"../view/RelatiEffect\";\nimport { PlacementRule } from \"../main/rule/Placement\";\nimport { Placement } from \"../main/skill/Placement\";\nimport { DestoryRepeater, RestoreRepeater } from \"../main/skill/Relati\";\nimport { updateSVG, removeSVGChild } from \"../core/SVGProcess\";\n\nconst toMainPageButton: HTMLElement = document.getElementById(\"help-to-main\") as HTMLElement;\nconst helpMessaageView: HTMLElement = document.getElementById(\"help-desc\") as HTMLElement;\n\ntoMainPageButton.addEventListener(\"click\", event => {\n    MessageBox.show(\"yorn accept reject\", \"確認離開？\", message => {\n        if (message == \"accept\") Page.switchTo(\"main\");\n    });\n});\n\nlet board = new RelatiBoard(9, 9);\nlet players = [new RelatiPlayer(\"O\"), new RelatiPlayer(\"X\")];\nlet gridActions: RelatiAction[] = [Placement];\nlet gridEffects: RelatiEffect[] = [DestoryRepeater, RestoreRepeater];\n\nlet game = new RelatiGame(\n    board, players, BY_COMMON_RELATI,\n    gridActions,\n    gridEffects\n);\n\nlet container = document.getElementById(\"help-board\") as HTMLElement;\nlet boardView = new RelatiBoardView(game, container);\n\nwindow.addEventListener(\"hashchange\", () => {\n    if (location.hash == \"#help\") game.restart();\n});\n\nboardView.context.addEventListener(\"click\", function (event: MouseEvent) {\n    let x: number = Math.floor(event.offsetX / 5),\n        y: number = Math.floor(event.offsetY / 5),\n        grid = board.getGrid(x, y);\n\n    if (\n        MessageBox.isShow ||\n        game.nowPlayer.symbol !== \"O\" ||\n        stepHint[game.turn] &&\n        stepHint[game.turn].indexOf(grid) < 0\n    ) return;\n\n    if (game.selectGrid) game.selectGrid(grid);\n});\n\ngame.onstart = () => {\n    MessageBox.show(\"verify\", \"放置符號時需發生連線，無法繼續放置符號時便輸了，以下為連線的範例\", null);\n    game.selectedGrid = stepGrid[game.turn];\n    boardView.remove();\n};\n\ngame.onend = gameResult => {\n    let messageIcon = \"\";\n    let messageContent = \"\";\n\n    switch (gameResult) {\n        case 1:\n            messageIcon = \"owin\";\n            messageContent = \"圈方獲勝！\";\n            break;\n        case 2:\n            messageIcon = \"xwin\";\n            messageContent = \"叉方獲勝！\";\n            break;\n        case 3:\n            messageIcon = \"draw\";\n            messageContent = \"無人獲勝！\";\n            break;\n    }\n\n    MessageBox.show(`${messageIcon} accept reject`, messageContent, message => {\n        if (message == \"accept\") game.restart();\n    });\n};\n\nlet prevPlayerSymbol: RelatiSymbol = \"\";\n\ngame.onturnstart = () => {\n    prevPlayerSymbol = game.nowPlayer.symbol;\n\n    if (stepMessage[game.turn]) {\n        helpMessaageView.innerHTML = stepMessage[game.turn];\n    }\n};\n\ngame.ongridselect = boardView.update.bind(boardView);\n\ngame.onturnend = () => {\n    boardView.update();\n\n    let symbol = game.nowPlayer.symbol;\n    let grids = PlacementRule.trace(\n        game, symbol, BY_COMMON_RELATI\n    );\n\n    removeSVGChild(boardView.layers[0]);\n    removeSVGChild(boardView.layers[1]);\n\n    createHintEffect(\n        grids,\n        game.nowPlayer.symbol,\n        boardView.layers[1]\n    );\n\n    if (stepHint[game.turn]) {\n        for (let childNode of boardView.layers[1].childNodes as unknown as Array<ChildNode>) {\n            updateSVG(childNode as SVGElement, { \"opacity\": \"0.4\" });\n        }\n\n        createHintEffect(\n            stepHint[game.turn],\n            game.nowPlayer.symbol,\n            boardView.layers[1]\n        );\n    }\n\n    createRelatiEffect(prevPlayerSymbol, boardView.layers[0], game);\n\n    let turn = game.turn;\n\n    if (game.turn < 2) {\n        game.selectedGrid = stepGrid[game.turn];\n    } else setTimeout(() => {\n        if (game.turn !== turn) return;\n        if (game.selectGrid) game.selectGrid(stepGrid[game.turn]);\n    }, 1000);\n\n    switch (game.turn) {\n        case 11:\n            MessageBox.show(\"verify\", \"倘若將一處圍成區塊時，對方將無法藉由連線把符號放入其中\", null);\n            break;\n        case 51:\n            MessageBox.show(\"verify\", \"恭喜，想必你對遊戲有一些概念了\", function () {\n                Page.switchTo(\"main\");\n            });\n    }\n};\n\nlet stepGrid: { [turn: number]: RelatiGrid } = {\n    0: board.getGrid(4, 4),\n    1: board.getGrid(5, 4),\n    3: board.getGrid(4, 5),\n    5: board.getGrid(2, 4),\n    7: board.getGrid(5, 3),\n    9: board.getGrid(7, 1),\n    11: board.getGrid(7, 5),\n    13: board.getGrid(8, 5),\n    15: board.getGrid(5, 5),\n    17: board.getGrid(3, 5),\n    19: board.getGrid(2, 5),\n    21: board.getGrid(6, 4),\n    23: board.getGrid(5, 6),\n    25: board.getGrid(5, 7),\n    27: board.getGrid(4, 7),\n    29: board.getGrid(3, 7),\n    31: board.getGrid(2, 7),\n    33: board.getGrid(1, 7),\n    35: board.getGrid(0, 7),\n    37: board.getGrid(1, 5),\n    39: board.getGrid(1, 6),\n    41: board.getGrid(2, 2),\n    43: board.getGrid(3, 2),\n    45: board.getGrid(0, 3),\n    47: board.getGrid(4, 1),\n    49: board.getGrid(0, 2)\n};\n\nlet stepHint: { [turn: number]: RelatiGrid[] } = {\n    2: [board.getGrid(4, 3), board.getGrid(3, 3)],\n    4: [board.getGrid(2, 1), board.getGrid(3, 1)],\n    6: [board.getGrid(6, 3)],\n    8: [board.getGrid(5, 2)],\n    10: [board.getGrid(6, 2)],\n    12: [\n        board.getGrid(5, 0),\n        board.getGrid(5, 1),\n        board.getGrid(7, 3),\n        board.getGrid(8, 3)\n    ],\n    20: [board.getGrid(6, 5)],\n    22: [board.getGrid(7, 4)],\n    24: [board.getGrid(6, 7)],\n    26: [board.getGrid(5, 8)],\n    28: [board.getGrid(4, 8)],\n    30: [board.getGrid(3, 8)],\n    32: [board.getGrid(2, 8)],\n    34: [board.getGrid(1, 8)],\n    36: [board.getGrid(1, 3)],\n    38: [board.getGrid(0, 5)],\n    40: [board.getGrid(1, 1)],\n    42: [board.getGrid(2, 3)],\n    44: [board.getGrid(1, 2)],\n    46: [board.getGrid(2, 1), board.getGrid(3, 1)],\n    48: [board.getGrid(3, 0)],\n    50: [board.getGrid(0, 1)]\n};\n\nstepHint[14] = stepHint[12];\nstepHint[16] = stepHint[12];\nstepHint[18] = stepHint[12];\n\nlet stepMessage: { [turn: number]: string } = {\n    0: \"一般連線範例\",\n    3: \"遠程連線範例\",\n    5: \"遠程連線中斷範例\",\n    7: \"遠程連線恢復技巧\",\n    9: \"遠程連線中斷技巧\",\n    11: \"區塊建立技巧\",\n    19: \"區塊破壞技巧\",\n    27: \"區塊壓制技巧\",\n    41: \"區塊抗壓技巧\"\n};\n\nif (location.hash == \"#help\") game.start();"],"sourceRoot":""}